@page "/applications/{referenceNumber}/{taskId?}/{*pageId}"
@using DfE.ExternalApplications.Infrastructure.Services
@using DfE.ExternalApplications.Application.Interfaces
@using GovUk.Frontend.AspNetCore.TagHelpers
@model RenderFormModel
@{
    ViewData["Title"] = "New application";
    var allTasksCompleted = Model.AreAllTasksCompleted();
}

@section BeforeContent {
    @switch (Model.CurrentFormState)
    {
        case FormState.TaskList:
            <govuk-back-link href="/applications/dashboard">Back to dashboard</govuk-back-link>
            break;
        case FormState.FormPage:
            <govuk-back-link href="@Model.BackLinkUrl">Back</govuk-back-link>
            break;
        case FormState.TaskSummary:
            <govuk-back-link href="/applications/@Model.ReferenceNumber">Back to application task list</govuk-back-link>
            break;
        case FormState.DerivedCollectionFlowSummary:
            <govuk-back-link href="/applications/@Model.ReferenceNumber">Back to application task list</govuk-back-link>
            break;
        case FormState.ApplicationPreview:
            <govuk-back-link href="/applications/@Model.ReferenceNumber">Back to application task list</govuk-back-link>
            break;
    }
}

@switch (Model.CurrentFormState)
{
    case FormState.TaskList:
        @await Html.PartialAsync("FormEngine/_TaskList", Model)
        break;
    case FormState.FormPage:
        @await Html.PartialAsync("FormEngine/_FormPage", Model)
        break;
    case FormState.TaskSummary:
        // If this task declares a multiCollectionFlow summary, render the custom summary
        if (Model.CurrentTask?.Summary?.Mode?.ToLowerInvariant() == "multicollectionflow")
        {
            @await Html.PartialAsync("FormEngine/_CollectionFlowSummary", Model)
        }
        else
        {
            @await Html.PartialAsync("FormEngine/_TaskSummary", Model)
        }
        break;
    case FormState.DerivedCollectionFlowSummary:
        @await Html.PartialAsync("FormEngine/_DerivedCollectionFlowSummary", Model)
        break;
    case FormState.ApplicationPreview:
        @await Html.PartialAsync("FormEngine/_ApplicationPreview", Model)
        break;
}