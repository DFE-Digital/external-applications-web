@page "/applications/{referenceNumber}/{taskId?}/{pageId?}"
@using DfE.ExternalApplications.Infrastructure.Services
@using GovUk.Frontend.AspNetCore.TagHelpers
@model RenderFormModel
@inject DfE.ExternalApplications.Web.Services.IFieldRendererService FieldRenderer
@inject DfE.ExternalApplications.Application.Interfaces.IComplexFieldConfigurationService ComplexFieldConfigurationService
@{
    ViewData["Title"] = "New application";
    var allTasksCompleted = Model.AreAllTasksCompleted();

    var applicationId = HttpContext.Session.GetString("ApplicationId");
    var leadApplicantName = HttpContext.Session.GetString($"ApplicationLeadApplicantName_{applicationId}");
    var leadApplicantEmail = HttpContext.Session.GetString($"ApplicationLeadApplicantEmail_{applicationId}");
    var applicationFormVersion = HttpContext.Session.GetString($"ApplicationFormVersion_{applicationId}");
    var currentUser = HttpContext.User.Claims.First(c => c.Type == "email");
}

@if (!String.IsNullOrEmpty(Model.CurrentPageId))
{

    bool hasUploadField = Model.CurrentPage.Fields.Any(f =>
        f.Type == "complexField" &&
        f.ComplexField != null &&
        ComplexFieldConfigurationService
            .GetConfiguration(f.ComplexField.Id)
            .FieldType.Equals("upload", StringComparison.OrdinalIgnoreCase));

    <form method="post" asp-page-handler="Page">
        <input type="hidden" asp-for="CurrentPageId" />
        <govuk-back-link href="/applications/@Model.ReferenceNumber/@Model.TaskId/summary">Back</govuk-back-link>
        <h1 class="govuk-heading-xl govuk-!-margin-bottom-6">@Model.CurrentTask.TaskName</h1>

        <govuk-error-summary>
            @{
                var ModelStateWithFieldProps = from m in ModelState
                                               join f in Model.CurrentPage.Fields on m.Key.ToString() equals f.FieldId
                                               select new { m, f };
            }
            @foreach (var s in ModelStateWithFieldProps.OrderBy(s => s.f.Order))
            {
                foreach (var e in s.m.Value.Errors)
                {
                    var href = $"#Data_{s.m.Key.ToString()}";
                    <govuk-error-summary-item href="@href">
                        @e.ErrorMessage
                    </govuk-error-summary-item>
                }
            }
        </govuk-error-summary>

        @foreach (var field in Model.CurrentPage.Fields.OrderBy(f => f.Order))
        {
            var currentValue = Model.Data.TryGetValue(field.FieldId, out var val) ? val.ToString() : String.Empty;

            var fieldModelState = ModelState.Where(f => f.Key == field.FieldId).FirstOrDefault();
            var errorMessage = fieldModelState.Value?.Errors?.FirstOrDefault()?.ErrorMessage ?? String.Empty;

            @await FieldRenderer.RenderFieldAsync(field, "Data", currentValue, errorMessage)
            ;
        }

        @if (!hasUploadField)
        {
            <govuk-button type="submit" name="handler" value="Page" id="save-and-continue-button">Save and continue</govuk-button>
        }
    </form>
}
else
{
    <govuk-back-link href="/applications/dashboard">Back to dashboard</govuk-back-link>

    <div class="govuk-grid-row">
        <div class="govuk-grid-column-two-thirds">
            <h1 class="govuk-heading-xl govuk-!-margin-bottom-6">Your application</h1>
            <div class="govuk-!-margin-bottom-6" style="border-left: 4px solid #b1b4b6; padding-left: 15px;">
                <p class="govuk-body govuk-!-margin-bottom-1">Application reference: <strong>@Model.ReferenceNumber</strong></p>
                <p class="govuk-body govuk-!-margin-bottom-0">Application form version: <strong>@applicationFormVersion</strong></p>
                <p class="govuk-body govuk-!-margin-bottom-0">Lead applicant: <strong>@leadApplicantName</strong></p>
            </div>
            @foreach (var group in Model.Template.TaskGroups.OrderBy(g => g.GroupOrder))
            {
                var groupNameHyphenated = group.GroupName.Replace(" ", "-").ToLower();

                <h2 class="govuk-heading-m" id="group-@groupNameHyphenated" data-testid="group-@groupNameHyphenated">
                    @group.GroupName
                </h2>
                <ul class="govuk-task-list">
                    @foreach (var task in group.Tasks.OrderBy(t => t.TaskOrder))
                    {
                        var currentTaskStatus = Model.GetTaskStatusFromSession(task.TaskId);
                        var statusClass = Model.GetTaskStatusDisplayClass(currentTaskStatus);
                        var statusText = Model.GetTaskStatusDisplayText(currentTaskStatus);

                        var taskNameHyphenated = task.TaskName.Replace(" ", "-").ToLower();

                        <li class="govuk-task-list__item govuk-task-list__item--with-link" id="group-@groupNameHyphenated-task-@taskNameHyphenated" data-testid="group-@groupNameHyphenated-task-@taskNameHyphenated">
                            <div class="govuk-task-list__name-and-hint">
                                @if (Model.IsApplicationEditable())
                                {
                                    <a class="govuk-link govuk-task-list__link" href="/applications/@Model.ReferenceNumber/@task.TaskId/summary" aria-label="task-@taskNameHyphenated">
                                        @task.TaskName
                                    </a>
                                }
                                else
                                {
                                    <span class="govuk-task-list__link" aria-label="task-@taskNameHyphenated">@task.TaskName</span>
                                }
                            </div>
                            <div class="govuk-task-list__status" id="task-@task.TaskId-status">
                                <govuk-tag class="@statusClass">@statusText</govuk-tag>
                            </div>
                        </li>
                    }
                </ul>
            }
            <div class="govuk-!-margin-top-6">
                @if (Model.IsApplicationEditable())
                {
                    <a href="/applications/@Model.ReferenceNumber/preview" class="govuk-button" role="button">
                        Preview application
                    </a>
                }
                else
                {
                    <a href="/applications/@Model.ReferenceNumber/preview" class="govuk-button" role="button">
                        View application
                    </a>
                    <div class="govuk-inset-text govuk-!-margin-top-4">
                        <p>This application has been submitted and can no longer be changed.</p>
                        <p>Status: <strong>@Model.ApplicationStatus</strong></p>
                    </div>
                }
            </div>
        </div>

        @if (currentUser.Value == leadApplicantEmail)
        {
            <div class="govuk-grid-column-one-third">
                <div class="govuk-!-margin-top-6">
                    <h2 class="govuk-heading-m">Inviting contributors</h2>
                    <p class="govuk-body">You can invite other people to complete parts of this application.</p>

                    @if (Model.IsApplicationEditable())
                    {
                        <a href="/applications/@Model.ReferenceNumber/contributors" id="invite-contributors" class="govuk-button govuk-button--secondary" role="button">
                            Invite contributors
                        </a>
                    }
                    else
                    {
                        <p class="govuk-body govuk-hint">Contributors cannot be invited to submitted applications.</p>
                    }
                </div>
            </div>
        }
    </div>
}