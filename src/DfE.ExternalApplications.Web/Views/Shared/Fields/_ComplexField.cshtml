@using Microsoft.AspNetCore.Html;
@using System.Text.Json;
@using DfE.ExternalApplications.Application.Interfaces;
@using DfE.ExternalApplications.Domain.Models;
@inject IComplexFieldConfigurationService ComplexFieldConfigurationService
@model DfE.ExternalApplications.Web.Services.FieldViewModel

@{
    var isRequired = Model.Field.Required ?? true;
    var validationAttributes = new HtmlString(Model.ValidationAttributes);
    var labelClasses = Model.Field.Label.IsPageHeading ? "govuk-label--l" : "";
    
    // Parse complex field configuration if present
    var complexField = Model.Field.ComplexField != null ? 
        JsonSerializer.Deserialize<Dictionary<string, object>>(Model.Field.ComplexField) : 
        new Dictionary<string, object>();
    
    // Get the complex field ID
    var complexFieldId = complexField.ContainsKey("id") ? complexField["id"].ToString() : "";
    
    if (string.IsNullOrEmpty(complexFieldId))
    {
        <div class="govuk-form-group govuk-form-group--error">
            <govuk-error-message>Complex field configuration is missing or invalid</govuk-error-message>
        </div>
        return;
    }
    
    // Get configuration from appsettings
    var configuration = ComplexFieldConfigurationService.GetConfiguration(complexFieldId);
    
    // Generate unique IDs
    var inputId = $"{Model.Id}-complex-field";
    var selectId = $"{Model.Id}-select";
    var selectedItemsId = $"{Model.Id}-selected-items";
    var searchInputId = $"{Model.Id}-search-input";
    
    // Helper function to format display value
    string FormatDisplayValue(object value)
    {
        if (value is Dictionary<string, object> dict)
        {
            var name = dict.ContainsKey("name") ? dict["name"]?.ToString() : "";
            var ukprn = dict.ContainsKey("ukprn") ? dict["ukprn"]?.ToString() : "";
            
            if (!string.IsNullOrEmpty(name) && !string.IsNullOrEmpty(ukprn))
            {
                return $"{name} (UKPRN: {ukprn})";
            }
            else if (!string.IsNullOrEmpty(name))
            {
                return name;
            }
        }
        return value?.ToString() ?? "";
    }
    
    // Get current values (for multiple selection, stored as JSON array)
    var currentValues = new List<object>();
    if (!string.IsNullOrEmpty(Model.CurrentValue))
    {
        try
        {
            // Try to deserialize as array of objects first
            using (var doc = JsonDocument.Parse(Model.CurrentValue))
            {
                if (doc.RootElement.ValueKind == JsonValueKind.Array)
                {
                    foreach (var element in doc.RootElement.EnumerateArray())
                    {
                        if (element.ValueKind == JsonValueKind.Object)
                        {
                            var obj = new Dictionary<string, object>();
                            foreach (var property in element.EnumerateObject())
                            {
                                if (property.Value.ValueKind == JsonValueKind.String)
                                {
                                    obj[property.Name] = property.Value.GetString();
                                }
                                else if (property.Value.ValueKind == JsonValueKind.Number)
                                {
                                    obj[property.Name] = property.Value.GetInt64().ToString();
                                }
                            }
                            currentValues.Add(obj);
                        }
                        else if (element.ValueKind == JsonValueKind.String)
                        {
                            currentValues.Add(element.GetString());
                        }
                    }
                }
                else if (doc.RootElement.ValueKind == JsonValueKind.Object)
                {
                    // Single object
                    var obj = new Dictionary<string, object>();
                    foreach (var property in doc.RootElement.EnumerateObject())
                    {
                        if (property.Value.ValueKind == JsonValueKind.String)
                        {
                            obj[property.Name] = property.Value.GetString();
                        }
                        else if (property.Value.ValueKind == JsonValueKind.Number)
                        {
                            obj[property.Name] = property.Value.GetInt64().ToString();
                        }
                    }
                    currentValues.Add(obj);
                }
                else
                {
                    // Single string value
                    currentValues.Add(Model.CurrentValue);
                }
            }
        }
        catch
        {
            // If not JSON, treat as single string value
            currentValues.Add(Model.CurrentValue);
        }
    }
}

<div class="govuk-form-group @(Model.ErrorMessage != "" ? "govuk-form-group--error" : "")">
    <govuk-label for="@selectId" class="govuk-label @labelClasses">
        @Model.Field.Label.Value
        @if (isRequired)
        {
            <span class="govuk-visually-hidden">required</span>
        }
    </govuk-label>
    
    @if (!string.IsNullOrEmpty(Model.Field.Tooltip))
    {
        <div class="govuk-hint">
            @Model.Field.Tooltip
        </div>
    }
    
    <govuk-error-message for="@Model.Id">@Model.ErrorMessage</govuk-error-message>
    
    <div class="complex-field-container" data-module="complex-field" data-field-type="@complexFieldId">
        <!-- Hidden input for form submission -->
        <input type="hidden" 
               id="@Model.Id" 
               name="Data[@Model.Field.FieldId]" 
               value="@Model.CurrentValue" 
               data-allow-multiple="@configuration.AllowMultiple.ToString().ToLower()" />
        
        <!-- Container for autocomplete - library will create input here -->
        <div id="@inputId-container" 
             class="complex-field-search-container"
             data-complex-field-id="@complexFieldId"
             data-min-length="@configuration.MinLength"
             data-allow-multiple="@configuration.AllowMultiple.ToString().ToLower()"
             data-max-selections="@configuration.MaxSelections"
             data-target-input="@Model.Id"
             data-selected-items-container="@selectedItemsId"
             data-placeholder="@configuration.Placeholder"
             aria-describedby="@(inputId)-hint">
        </div>
        
        <div id="@(inputId)-hint" class="govuk-visually-hidden">
            Use this field to search and select options. Type at least @configuration.MinLength characters to see results.
            @if (configuration.AllowMultiple)
            {
                <span>You can select multiple options.</span>
            }
        </div>
        
        <!-- Maximum selections message -->
        @if (configuration.AllowMultiple && configuration.MaxSelections > 0)
        {
            <div id="@(inputId)-max-message" class="govuk-inset-text" style="display: none;">
                <p class="govuk-body">You have reached the maximum number of selections (@configuration.MaxSelections). Remove a selection to add a different one.</p>
            </div>
        }
        
        <!-- Selected items container -->
        @if (configuration.AllowMultiple)
        {
            <div id="@selectedItemsId" class="complex-field-selected-items">
                @foreach (var selectedValue in currentValues)
                {
                    var displayValue = FormatDisplayValue(selectedValue);
                    var dataValue = selectedValue is Dictionary<string, object> ? 
                        JsonSerializer.Serialize(selectedValue) : selectedValue.ToString();
                    
                    <div class="govuk-inset-text complex-field-selected-inset" data-value="@dataValue">
                        @if (selectedValue is Dictionary<string, object> dict)
                        {
                            var name = dict.ContainsKey("name") ? dict["name"]?.ToString() : "";
                            var ukprn = dict.ContainsKey("ukprn") ? dict["ukprn"]?.ToString() : "";
                            
                            <p class="govuk-body">
                                <strong>@name</strong>
                                @if (!string.IsNullOrEmpty(ukprn))
                                {
                                    <br />
                                    <span class="govuk-hint">UKPRN: @ukprn</span>
                                }
                            </p>
                        }
                        else
                        {
                            <p class="govuk-body"><strong>@displayValue</strong></p>
                        }
                        
                        <button type="button" 
                                class="govuk-button govuk-button--secondary govuk-button--small complex-field-remove-item"
                                aria-label="Remove @displayValue">
                            Remove
                        </button>
                    </div>
                }
            </div>
        }
        else if (currentValues.Any())
        {
            <div id="@selectedItemsId" class="complex-field-selected-items">
                @{
                    var selectedValue = currentValues.First();
                    var displayValue = FormatDisplayValue(selectedValue);
                    var dataValue = selectedValue is Dictionary<string, object> ? 
                        JsonSerializer.Serialize(selectedValue) : selectedValue.ToString();
                }
                
                <div class="govuk-inset-text complex-field-selected-inset" data-value="@dataValue">
                    @if (selectedValue is Dictionary<string, object> dict)
                    {
                        var name = dict.ContainsKey("name") ? dict["name"]?.ToString() : "";
                        var ukprn = dict.ContainsKey("ukprn") ? dict["ukprn"]?.ToString() : "";
                        
                        <p class="govuk-body">
                            <strong>@name</strong>
                            @if (!string.IsNullOrEmpty(ukprn))
                            {
                                <br />
                                <span class="govuk-hint">UKPRN: @ukprn</span>
                            }
                        </p>
                    }
                    else
                    {
                        <p class="govuk-body"><strong>@displayValue</strong></p>
                    }
                    
                    <button type="button" 
                            class="govuk-button govuk-button--secondary govuk-button--small complex-field-remove-item"
                            aria-label="Remove @displayValue">
                        Remove
                    </button>
                </div>
            </div>
        }
        else
        {
            <div id="@selectedItemsId" class="complex-field-selected-items"></div>
        }
    </div>
</div>

<style>
    .complex-field-container {
        position: relative;
    }
    
    /* Selected items styling - GovUK Inset Text */
    .complex-field-selected-items {
        margin-top: 15px;
    }
    
    .complex-field-selected-inset {
        position: relative;
        margin-bottom: 15px;
    }
    
    .complex-field-selected-inset:last-child {
        margin-bottom: 0;
    }
    
    .complex-field-selected-inset .govuk-body {
        margin-bottom: 15px;
    }
    
    .complex-field-selected-inset .govuk-hint {
        margin-top: 0;
    }
    
    .complex-field-selected-inset .govuk-button {
        margin-top: 0;
    }
    
    /* Custom autocomplete suggestion styling */
    .complex-field-suggestion {
        padding: 2px 0;
    }
    
    .complex-field-suggestion-name {
        font-weight: 400;
        color: #0b0c0c;
        line-height: 1.2;
    }
    
    .complex-field-suggestion-identifiers {
        font-size: 16px;
        color: #6f777b;
        font-weight: 400;
        margin-top: 2px;
        line-height: 1.2;
    }
    
    /* Accessible autocomplete styling overrides */
    .autocomplete__wrapper {
        position: relative;
    }
    
    .autocomplete__input {
        border: 2px solid #0b0c0c;
        border-radius: 0;
        box-sizing: border-box;
        font-family: "GDS Transport", arial, sans-serif;
        font-size: 16px;
        font-weight: 400;
        line-height: 1.25;
        padding: 5px 4px 4px;
        width: 100%;
        background-color: #ffffff;
        color: #0b0c0c;
    }
    
    .autocomplete__input:focus {
        outline: 3px solid #ffdd00;
        outline-offset: 0;
        box-shadow: inset 0 0 0 2px;
    }
    
    /* Error state styling */
    .govuk-form-group--error .autocomplete__input {
        border-color: #d4351c;
    }
    
    .autocomplete__menu {
        background-color: #ffffff;
        border: 2px solid #0b0c0c;
        border-top: 0;
        color: #0b0c0c;
        margin: 0;
        max-height: 342px;
        overflow-x: hidden;
        overflow-y: auto;
        padding: 0;
        width: 100%;
        z-index: 100;
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }
    
    .autocomplete__option {
        border-bottom: solid #b1b4b6;
        border-width: 1px 0;
        cursor: pointer;
        display: block;
        position: relative;
        padding: 10px;
        font-family: "GDS Transport", arial, sans-serif;
        font-size: 16px;
        font-weight: 400;
        line-height: 1.25;
        color: #0b0c0c;
    }
    
    .autocomplete__option > * {
        pointer-events: none;
    }
    
    .autocomplete__option:focus,
    .autocomplete__option:hover {
        background-color: #1d70b8;
        border-color: #1d70b8;
        color: #ffffff;
    }
    
    .autocomplete__option--odd {
        background-color: #fafafa;
    }
    
    .autocomplete__option--focused,
    .autocomplete__option--selected {
        background-color: #1d70b8;
        border-color: #1d70b8;
        color: #ffffff;
    }
    
    .autocomplete__hint {
        color: #6f777b;
        position: absolute;
        right: 0;
        top: 0;
    }
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
    // Test if accessible-autocomplete is available
    console.log('DOM loaded. Testing accessible-autocomplete...');
    console.log('accessibleAutocomplete:', typeof accessibleAutocomplete);
    
    // Initialize complex field functionality
    const containers = document.querySelectorAll('[data-module="complex-field"]');
    console.log('Found complex field containers:', containers.length);
    
    containers.forEach(function(container) {
        // Check if this container has already been initialized
        if (container.dataset.initialized === 'true') {
            console.log('Container already initialized, skipping...');
            return;
        }
        
        const complexFieldContainer = container.querySelector('[data-complex-field-id]');
        const hiddenInput = container.querySelector('input[type="hidden"]');
        const selectedItemsContainer = container.querySelector('.complex-field-selected-items');
        const complexFieldId = complexFieldContainer.dataset.complexFieldId;
        const allowMultiple = complexFieldContainer.dataset.allowMultiple === 'true';
        const minLength = parseInt(complexFieldContainer.dataset.minLength) || 3;
        const placeholder = complexFieldContainer.dataset.placeholder;
        const maxSelections = parseInt(complexFieldContainer.dataset.maxSelections) || 0;
        
        console.log('Initializing complex field for container element:', complexFieldContainer);
        console.log('Complex Field ID:', complexFieldId);
        console.log('Placeholder:', placeholder);
        console.log('Max selections:', maxSelections);
        
        // Initialize accessible autocomplete on the container element
        if (typeof accessibleAutocomplete !== 'undefined') {
            try {
                accessibleAutocomplete({
                    element: complexFieldContainer,
                    id: complexFieldContainer.id,
                    placeholder: placeholder,
                    showAllValues: false,
                    templates: {
                        inputValue: function(result) {
                            if (typeof result === 'object' && result !== null && result.name) {
                                return result.name;
                            }
                            return result ? result.toString() : '';
                        },
                        suggestion: function(result) {
                            if (typeof result === 'object' && result !== null && result.name) {
                                var html = '<div class="complex-field-suggestion">';
                                html += '<div class="complex-field-suggestion-name">' + escapeHtml(result.name) + '</div>';
                                
                                if (result.ukprn) {
                                    html += '<div class="complex-field-suggestion-identifiers">UKPRN: ' + escapeHtml(result.ukprn) + '</div>';
                                }
                                
                                html += '</div>';
                                return html;
                            }
                            return result ? escapeHtml(result.toString()) : '';
                        }
                    },
                    source: function(query, populateResults) {
                        console.log('Source called with query:', query);
                        console.log('Query length:', query.length, 'Min length:', minLength);
                        
                        // If query is empty or too short, don't show any results
                        if (!query || query.length < minLength) {
                            console.log('Query too short, returning empty results');
                            populateResults([]);
                            return;
                        }
                        
                        // Use the complex field ID for the API call
                        var requestUrl = window.location.pathname + '?handler=complexField&complexFieldId=' + encodeURIComponent(complexFieldId) + '&query=' + encodeURIComponent(query);
                        console.log('Making API call to:', requestUrl);
                        
                        // Make API call to the endpoint
                        fetch(requestUrl)
                            .then(response => {
                                console.log('API response status:', response.status);
                                console.log('API response ok:', response.ok);
                                return response.json();
                            })
                            .then(data => {
                                console.log('Raw API response:', data);
                                // The service now returns a simple array of objects or strings
                                var results = Array.isArray(data) ? data : [];
                                console.log('Results before filtering:', results);
                                // Filter out empty values
                                results = results.filter(function(item) {
                                    if (typeof item === 'object' && item !== null) {
                                        return item.name && item.name.toString().trim() !== '';
                                    }
                                    return item && item.toString().trim() !== '';
                                });
                                console.log('Final filtered results:', results);
                                populateResults(results);
                            })
                            .catch(error => {
                                console.error('Complex field API error:', error);
                                populateResults([]);
                            });
                    },
                    minLength: minLength,
                    onConfirm: function(option) {
                        console.log('Option confirmed:', option);
                        if (option && (typeof option === 'string' && option.trim() !== '' || typeof option === 'object' && option.name)) {
                            addSelectedItem(option);
                            // Clear the input after selection
                            const autocompleteInput = container.querySelector('.autocomplete__input');
                            if (autocompleteInput) {
                                autocompleteInput.value = '';
                            }
                        }
                    }
                });
                
                console.log('Complex field initialized successfully');
                
                // Mark this container as initialized
                container.dataset.initialized = 'true';
                
                // Apply GovUK styling to the created input after a short delay
                setTimeout(function() {
                    const autocompleteInput = container.querySelector('.autocomplete__input');
                    if (autocompleteInput) {
                        autocompleteInput.classList.add('govuk-input');
                        if (container.closest('.govuk-form-group--error')) {
                            autocompleteInput.classList.add('govuk-input--error');
                        }
                        console.log('Applied GovUK styling to complex field input');
                    }
                }, 100);
                
            } catch (error) {
                console.error('Error initializing accessible-autocomplete for complex field:', error);
            }
        } else {
            console.error('accessibleAutocomplete is not available');
        }
        
        // Attach event listeners to existing remove buttons (for server-rendered items)
        attachRemoveButtonListeners();
        
        // Check initial selection limit state
        const initialValues = getCurrentValues();
        updateSelectionLimitUI(initialValues);
        
        function attachRemoveButtonListeners() {
            const existingRemoveButtons = selectedItemsContainer.querySelectorAll('.complex-field-remove-item');
            existingRemoveButtons.forEach(function(button) {
                button.addEventListener('click', function() {
                    const itemElement = button.closest('.complex-field-selected-inset');
                    if (itemElement) {
                        const dataValue = itemElement.getAttribute('data-value');
                        let valueToRemove;
                        
                        try {
                            // Try to parse as JSON object
                            valueToRemove = JSON.parse(dataValue);
                        } catch {
                            // If not JSON, use as string
                            valueToRemove = dataValue;
                        }
                        
                        console.log('Removing value:', valueToRemove);
                        removeSelectedItem(valueToRemove);
                    }
                });
            });
        }
        
        function addSelectedItem(value) {
            const currentValues = getCurrentValues();
            
            // Check maximum selections limit for multiple selection
            if (allowMultiple && maxSelections > 0 && currentValues.length >= maxSelections) {
                console.log('Maximum selections reached:', maxSelections);
                return; // Don't add more items
            }
            
            if (!allowMultiple) {
                // Single selection - replace existing
                currentValues.length = 0;
                currentValues.push(value);
            } else {
                // Multiple selection - add if not already present
                if (!isValueAlreadySelected(value, currentValues)) {
                    currentValues.push(value);
                }
            }
            
            updateSelectedItems(currentValues);
            updateHiddenInput(currentValues);
            updateSelectionLimitUI(currentValues);
        }
        
        function removeSelectedItem(value) {
            const currentValues = getCurrentValues();
            const index = findValueIndex(value, currentValues);
            if (index > -1) {
                currentValues.splice(index, 1);
            }
            
            updateSelectedItems(currentValues);
            updateHiddenInput(currentValues);
            updateSelectionLimitUI(currentValues);
        }
        
        function isValueAlreadySelected(value, currentValues) {
            return findValueIndex(value, currentValues) > -1;
        }
        
        function findValueIndex(value, currentValues) {
            for (let i = 0; i < currentValues.length; i++) {
                if (valuesEqual(value, currentValues[i])) {
                    return i;
                }
            }
            return -1;
        }
        
        function valuesEqual(value1, value2) {
            // If both are objects, compare their JSON representation
            if (typeof value1 === 'object' && typeof value2 === 'object' && value1 !== null && value2 !== null) {
                return JSON.stringify(value1) === JSON.stringify(value2);
            }
            // If both are strings or one is string, compare as strings
            return value1.toString() === value2.toString();
        }
        
        function getCurrentValues() {
            const hiddenValue = hiddenInput.value;
            if (!hiddenValue) return [];
            
            try {
                const parsed = JSON.parse(hiddenValue);
                // If it's already an array, return it
                if (Array.isArray(parsed)) {
                    return parsed;
                }
                // If it's a single object, wrap it in an array
                return [parsed];
            } catch {
                // If not JSON, treat as single string value
                return [hiddenValue];
            }
        }
        
        function updateSelectedItems(values) {
            selectedItemsContainer.innerHTML = '';
            
            values.forEach(function(value) {
                const itemElement = document.createElement('div');
                itemElement.className = 'govuk-inset-text complex-field-selected-inset';
                
                // Handle both object and string values
                var displayName, ukprnText = '';
                if (typeof value === 'object' && value !== null) {
                    displayName = value.name || value.toString();
                    if (value.ukprn) {
                        ukprnText = 'UKPRN: ' + value.ukprn;
                    }
                    itemElement.setAttribute('data-value', JSON.stringify(value));
                } else {
                    displayName = value.toString();
                    itemElement.setAttribute('data-value', value);
                }
                
                var html = '<p class="govuk-body">';
                html += '<strong>' + escapeHtml(displayName) + '</strong>';
                if (ukprnText) {
                    html += '<br />';
                    html += '<span class="govuk-hint">' + ukprnText + '</span>';
                }
                html += '</p>';
                html += '<button type="button" class="govuk-button govuk-button--secondary govuk-button--small complex-field-remove-item" aria-label="Remove ' + escapeHtml(displayName) + '">';
                html += 'Remove';
                html += '</button>';
                
                itemElement.innerHTML = html;
                
                const removeButton = itemElement.querySelector('.complex-field-remove-item');
                removeButton.addEventListener('click', function() {
                    removeSelectedItem(value);
                });
                
                selectedItemsContainer.appendChild(itemElement);
            });
        }
        
        function updateHiddenInput(values) {
            if (allowMultiple) {
                hiddenInput.value = JSON.stringify(values);
            } else {
                // For single selection, still serialize objects to JSON
                if (values.length > 0) {
                    const value = values[0];
                    if (typeof value === 'object' && value !== null) {
                        hiddenInput.value = JSON.stringify(value);
                    } else {
                        hiddenInput.value = value;
                    }
                } else {
                    hiddenInput.value = '';
                }
            }
        }
        
        function updateSelectionLimitUI(currentValues) {
            if (!allowMultiple || maxSelections === 0) return;
            
            const autocompleteInput = container.querySelector('.autocomplete__input');
            const maxMessage = document.getElementById(complexFieldContainer.id.replace('-container', '') + '-max-message');
            
            if (currentValues.length >= maxSelections) {
                // Hide autocomplete input and show message
                if (autocompleteInput) {
                    autocompleteInput.style.display = 'none';
                    autocompleteInput.disabled = true;
                }
                if (maxMessage) {
                    maxMessage.style.display = 'block';
                }
            } else {
                // Show autocomplete input and hide message
                if (autocompleteInput) {
                    autocompleteInput.style.display = 'block';
                    autocompleteInput.disabled = false;
                }
                if (maxMessage) {
                    maxMessage.style.display = 'none';
                }
            }
        }
        
        function escapeHtml(text) {
            const map = {
                '&': '&amp;',
                '<': '&lt;',
                '>': '&gt;',
                '"': '&quot;',
                "'": '&#039;'
            };
            return text.replace(/[&<>"']/g, function(m) { return map[m]; });
        }
    });
    
    // Global escapeHtml function for templates
    window.escapeHtml = function(text) {
        const map = {
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            "'": '&#039;'
        };
        return text.replace(/[&<>"']/g, function(m) { return map[m]; });
    };
});
</script> 