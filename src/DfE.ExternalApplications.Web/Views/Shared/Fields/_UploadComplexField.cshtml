@using DfE.ExternalApplications.Web.Services
@using DfE.CoreLibs.Contracts.ExternalApplications.Models.Response
@inject IHttpContextAccessor httpContext;
@inject DfE.ExternalApplications.Web.Interfaces.IFormErrorStore FormErrorStore
@using Microsoft.AspNetCore.Http.Extensions
@using Microsoft.AspNetCore.Http
@using System.Linq
@using System.Text.Json
@model FieldViewModel
@{
    var applicationId = ViewData["applicationId"] as string ?? Context.Session.GetString("ApplicationId");
    var fieldId = Model.Field.FieldId;

    var files = ViewData[$"{fieldId}_Files"] as IEnumerable<UploadDto>;
    if (files == null || !files.Any())
    {
        if (!string.IsNullOrEmpty(Model.CurrentValue))
        {
            try
            {
                files = JsonSerializer.Deserialize<List<UploadDto>>(Model.CurrentValue);
            }
            catch
            {
                files = new List<UploadDto>();
            }
        }

        files ??= new List<UploadDto>();
    }
    else
    {
        files = files.ToList();
    }
}

@{
    var currentUrl = httpContext.HttpContext.Request.Path.Value;
    var referenceNumber = ViewData["referenceNumber"]?.ToString();
    var taskId = ViewData["taskId"]?.ToString();
    var pageId = ViewData["pageId"]?.ToString();

    // Check if we're in a collection flow context
    bool isCollectionFlow = false;
    string flowId = "";
    string instanceId = "";
    string flowPageId = "";
    string actualPageId = pageId;
    string actualReturnUrl = currentUrl;
    
    if (!string.IsNullOrEmpty(pageId) && pageId.StartsWith("flow/", StringComparison.OrdinalIgnoreCase))
    {
        // Parse collection flow route: flow/{flowId}/{instanceId}/{flowPageId?}
        var parts = pageId.Split('/', StringSplitOptions.RemoveEmptyEntries);
        if (parts.Length >= 3 && parts[0].Equals("flow", StringComparison.OrdinalIgnoreCase))
        {
            isCollectionFlow = true;
            flowId = parts[1];
            instanceId = parts[2];
            flowPageId = parts.Length > 3 ? parts[3] : "";
            
            // For collection flows, use the inner page ID for upload handler
            actualPageId = flowPageId;
            
            // The return URL should be the full collection flow URL
            actualReturnUrl = $"/applications/{referenceNumber}/{taskId}/{pageId}";
        }
    }

    // Create proper Continue button URL
    var continueUrl = $"/applications/{referenceNumber}/{taskId}";
    string continueButtonText = "Continue";
    
    if (isCollectionFlow)
    {
        // For collection flows, we need to determine if this is the last page or if there's a next page
        // This should trigger the normal form submission flow which will handle navigation properly
        continueUrl = actualReturnUrl; // This will POST back to the collection flow, which handles next page logic
        continueButtonText = "Continue";
    }
}
@* Rehydrate ModelState from the error store and render govuk summary *@
@{
    var (fieldErrors, general) = FormErrorStore.Load(fieldId);
    foreach (var kv in fieldErrors)
        foreach (var msg in kv.Value)
            ViewData.ModelState.AddModelError(kv.Key, msg);
    // Only add a general error if there were no field-level messages, to avoid duplication in the summary
    if (!string.IsNullOrWhiteSpace(general) && !fieldErrors.SelectMany(k => k.Value).Any())
        ViewData.ModelState.AddModelError("Error", general);
}
@await Html.PartialAsync("/Pages/Shared/_ErrorSummaryModelState.cshtml")

<div class="govuk-grid-row">
    <div class="govuk-grid-column-two-thirds">
        @if (!string.IsNullOrEmpty(Model.Field.Tooltip))
        {
            <p class="govuk-body">@Model.Field.Tooltip</p>
        }

        <p class="govuk-body">Give the file a clear, descriptive name. Files up to 10MB are accepted.</p>

        <form method="post" asp-page="/FormEngine/RenderForm" asp-route-referenceNumber="@referenceNumber" asp-route-taskId="@taskId" asp-route-pageId="@actualPageId" asp-page-handler="UploadFile" enctype="multipart/form-data">
            <input type="hidden" name="ApplicationId" value="@applicationId" />
            <input type="hidden" name="FieldId" value="@fieldId" />
            <input type="hidden" name="ReturnUrl" value="@actualReturnUrl" />
            <input type="hidden" name="UploadName" value="FileName" />
            <input type="hidden" name="UploadDescription" value="FileDescription" />
            @* Preserve existing files across upload by sending their IDs *@
            @foreach (var f in files)
            {
                <input type="hidden" name="ExistingFileIds" value="@f.Id" />
            }
            @* Pass collection flow context if needed *@
            @if (isCollectionFlow)
            {
                <input type="hidden" name="FlowId" value="@flowId" />
                <input type="hidden" name="InstanceId" value="@instanceId" />
            }

            <div class="govuk-form-group @(ViewData.ModelState.Any(x => x.Value.Errors.Count > 0) ? "govuk-form-group--error" : "")">
                <label class="govuk-label" for="upload-file-@fieldId">
                    Upload a file
                </label>
                <input class="govuk-file-upload @(ViewData.ModelState.Any(x => x.Value.Errors.Count > 0) ? "govuk-file-upload--error" : "")"
                       id="upload-file-@fieldId"
                       name="UploadFile"
                       type="file"
                       required />
                @if (ViewData.ModelState.Any(x => x.Value.Errors.Count > 0))
                {
                    <govuk-error-message>
                        @string.Join(", ", ViewData.ModelState.Values.SelectMany(v => v.Errors).Select(e => e.ErrorMessage))
                    </govuk-error-message>
                }
            </div>

            <button class="govuk-button" type="submit">Upload file</button>
        </form>
    </div>
</div>
<div class="govuk-grid-row">
    <div class="govuk-grid-column-full">
        <h2 class="govuk-heading-s">Uploaded files</h2>

        <table class="govuk-table">
            <thead class="govuk-table__head">
                <tr class="govuk-table__row">
                    <th scope="col" class="govuk-table__header">File name</th>
                    <th scope="col" class="govuk-table__header">File size</th>
                    <th scope="col" class="govuk-table__header">File type</th>
                    <th scope="col" class="govuk-table__header">Action</th>
                </tr>
            </thead>
            <tbody class="govuk-table__body">
                @if (files.Any())
                {
                    @foreach (var file in files)
                    {
                        <tr class="govuk-table__row">
                            <td class="govuk-table__cell">
                                <form method="post" asp-page="/FormEngine/RenderForm" asp-route-referenceNumber="@referenceNumber" asp-route-taskId="@taskId" asp-route-pageId="@actualPageId" asp-page-handler="DownloadFile" style="display:inline">
                                    <input type="hidden" name="FileId" value="@file.Id" />
                                    <input type="hidden" name="ApplicationId" value="@applicationId" />
                                    @if (isCollectionFlow)
                                    {
                                        <input type="hidden" name="FlowId" value="@flowId" />
                                        <input type="hidden" name="InstanceId" value="@instanceId" />
                                    }
                                    <button type="submit" class="govuk-link" style="border: none; background: none; padding: 0; color: #1d70b8; text-decoration: underline; cursor: pointer;">
                                        @file.OriginalFileName
                                    </button>
                                </form>
                            </td>
                            <td class="govuk-table__cell">@FormatFileSize(file.FileSize)</td>
                            <td class="govuk-table__cell">@(System.IO.Path.GetExtension(file.OriginalFileName)?.TrimStart('.').ToUpperInvariant() ?? "Unknown")</td>
                            <td class="govuk-table__cell">
                                <form method="post" asp-page="/FormEngine/RenderForm" asp-route-referenceNumber="@referenceNumber" asp-route-taskId="@taskId" asp-route-pageId="@actualPageId" asp-page-handler="DeleteFile" style="display:inline">
                                    <input type="hidden" name="FileId" value="@file.Id" />
                                    <input type="hidden" name="FieldId" value="@fieldId" />
                                    <input type="hidden" name="ApplicationId" value="@applicationId" />
                                    <input type="hidden" name="ReturnUrl" value="@actualReturnUrl" />
                                    @if (isCollectionFlow)
                                    {
                                        <input type="hidden" name="FlowId" value="@flowId" />
                                        <input type="hidden" name="InstanceId" value="@instanceId" />
                                    }
                                    <button type="submit" class="govuk-button govuk-button--warning govuk-button--small"
                                            data-module="govuk-button"
                                            onclick="return confirm('Are you sure you want to delete this file?');">
                                        Delete
                                    </button>
                                </form>
                            </td>
                        </tr>
                    }

                }
                else
                {
                    <tr class="govuk-table__row">
                        <td class="govuk-table__cell" colspan="4">No files uploaded yet</td>
                    </tr>
                }
            </tbody>
        </table>

        
        @if (isCollectionFlow)
        {
            <!-- For collection flows, submit form to trigger flow progression -->
            <form method="post" asp-page="/FormEngine/RenderForm" asp-route-referenceNumber="@referenceNumber" asp-route-taskId="@taskId" asp-route-pageId="@pageId" asp-page-handler="Page">
                <!-- Don't include large JSON data - rely on session storage instead -->
                <input type="hidden" name="Data[@fieldId]" value="UPLOAD_FIELD_SESSION_DATA" />
                <!-- Include collection flow context to ensure proper navigation -->
                <input type="hidden" name="FlowId" value="@flowId" />
                <input type="hidden" name="InstanceId" value="@instanceId" />
                <input type="hidden" name="FlowPageId" value="@flowPageId" />
                <input type="hidden" name="IsCollectionFlow" value="true" />
                <button type="submit" class="govuk-button" data-module="govuk-button">@continueButtonText</button>
            </form>
        }
        else
        {
            <!-- For regular forms, redirect to summary -->
            <a href="@continueUrl" role="button" draggable="false" class="govuk-button" data-module="govuk-button">@continueButtonText</a>
        }
    </div>
</div>

@functions {
    private string FormatFileSize(long bytes)
    {
        const int scale = 1024;
        string[] orders = new string[] { "GB", "MB", "KB", "Bytes" };
        long max = (long)Math.Pow(scale, orders.Length - 1);

        foreach (string order in orders)
        {
            if (bytes > max)
                return string.Format("{0:##.##} {1}", decimal.Divide(bytes, max), order);
            max /= scale;
        }
        return "0 Bytes";
    }
}