@using System.Collections
@using System.Text.Json
@using DfE.ExternalApplications.Web.Services
@using DfE.CoreLibs.Contracts.ExternalApplications.Models.Response
@inject IHttpContextAccessor httpContext;
@using Microsoft.AspNetCore.Http.Extensions
@model FieldViewModel
@{
    var applicationId = ViewData["applicationId"] as string ?? Context.Session.GetString("ApplicationId");
    var fieldId = Model.Field.FieldId;

    var files = ViewData[$"{fieldId}_Files"] as IEnumerable<UploadDto>;
    if (files == null || !files.Any())
    {
        if (!string.IsNullOrEmpty(Model.CurrentValue))
        {
            try
            {
                files = JsonSerializer.Deserialize<List<UploadDto>>(Model.CurrentValue);
            }
            catch
            {
                files = new List<UploadDto>();
            }
        }

        files ??= new List<UploadDto>();
    }
    else
    {
        files = files.ToList();
    }


    var pageUrl = httpContext.HttpContext.Request.Path.Value;
}

@{
    var currentUrl = httpContext.HttpContext.Request.GetDisplayUrl();
    var referenceNumber = ViewData["referenceNumber"]?.ToString();
    var taskId = ViewData["taskId"]?.ToString();
    var pageId = ViewData["pageId"]?.ToString();
    
    // Create summary page URL for the Continue button
    var summaryUrl = $"/applications/{referenceNumber}/{taskId}/summary";
}
<h3 class="govuk-heading-m">@Model.Field.Label.Value</h3>

@if (!string.IsNullOrEmpty(Model.Field.Tooltip))
{
    <p class="govuk-body">@Model.Field.Tooltip</p>
}

<p class="govuk-body">Give the file a clear, descriptive name. Files up to 10MB are accepted.</p>

<form method="post" asp-page="/FormEngine/UploadFile" asp-route-referenceNumber="@referenceNumber" asp-route-taskId="@taskId" asp-route-pageId="@pageId" asp-page-handler="UploadFile" enctype="multipart/form-data">
    <input type="hidden" name="ApplicationId" value="@applicationId" />
    <input type="hidden" name="FieldId" value="@fieldId" />
    <input type="hidden" name="ReturnUrl" value="@currentUrl" />
    <input type="hidden" name="UploadName" value="FileName" />
    <input type="hidden" name="UploadDescription" value="FileDescription" />
    
    <div class="govuk-form-group">
        <input class="govuk-file-upload" id="upload-file-@fieldId" name="UploadFile" type="file" required />
    </div>
    
    <button class="govuk-button" type="submit">Upload file</button>
</form>
<h4 class="govuk-heading-s">Uploaded files</h4>

<table class="govuk-table">
    <thead class="govuk-table__head">
        <tr class="govuk-table__row">
            <th scope="col" class="govuk-table__header">File name</th>
            <th scope="col" class="govuk-table__header">File size</th>
            <th scope="col" class="govuk-table__header">File type</th>
            <th scope="col" class="govuk-table__header">Action</th>
        </tr>
    </thead>
    <tbody class="govuk-table__body">
    @if (files.Any())
    {
        @foreach (var file in files)
        {
            <tr class="govuk-table__row">
                <td class="govuk-table__cell">@file.OriginalFileName</td>
                    <td class="govuk-table__cell">@FormatFileSize(file.FileSize)</td>
                <td class="govuk-table__cell">@(System.IO.Path.GetExtension(file.OriginalFileName)?.TrimStart('.').ToUpperInvariant() ?? "Unknown")</td>
                <td class="govuk-table__cell">
                    <form method="post" asp-page="/FormEngine/UploadFile" asp-route-referenceNumber="@referenceNumber" asp-route-taskId="@taskId" asp-route-pageId="@pageId" asp-page-handler="DeleteFile" style="display:inline">
                        <input type="hidden" name="FileId" value="@file.Id" />
                        <input type="hidden" name="FieldId" value="@fieldId" />
                        <input type="hidden" name="ApplicationId" value="@applicationId" />
                        <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                            <button type="submit" class="govuk-button govuk-button--warning govuk-button--small"
                                    data-module="govuk-button"
                                    onclick="return confirm('Are you sure you want to delete this file?');">
                                Delete
                            </button>
                    </form>
                </td>
            </tr>
        }
    }
    else
    {
        <tr class="govuk-table__row">
            <td class="govuk-table__cell" colspan="4">No files uploaded yet</td>
        </tr>
    }
    </tbody>
</table>

<a href="@summaryUrl" class="govuk-button" data-module="govuk-button">Continue</a> 

@functions {
    private string FormatFileSize(long bytes)
    {
        const int scale = 1024;
        string[] orders = new string[] { "GB", "MB", "KB", "Bytes" };
        long max = (long)Math.Pow(scale, orders.Length - 1);
        
        foreach (string order in orders)
        {
            if (bytes > max)
                return string.Format("{0:##.##} {1}", decimal.Divide(bytes, max), order);
            max /= scale;
        }
        return "0 Bytes";
    }
}