@using System.Security.Claims
@model DfE.ExternalApplications.Web.Pages.FormEngine.RenderFormModel
@inject DfE.ExternalApplications.Application.Interfaces.IDerivedCollectionFlowService DerivedFlowService
@{
    var applicationId = Context.Session.GetString("ApplicationId");
    var leadApplicantEmail = Context.Session.GetString($"ApplicationLeadApplicantEmail_{applicationId}");
    
    // Use robust claim checking like authentication strategies do
    var currentUserEmail = Context.User?.FindFirst(ClaimTypes.Email)?.Value 
                        ?? Context.User?.FindFirst("email")?.Value
                        ?? Context.User?.FindFirst("sub")?.Value
                        ?? Context.User?.FindFirst(ClaimTypes.NameIdentifier)?.Value
                        ?? Context.User?.Identity?.Name;
    
    var isLeadApplicant = string.Equals(currentUserEmail?.Trim(), leadApplicantEmail?.Trim(), StringComparison.InvariantCultureIgnoreCase);
}

<div class="govuk-grid-row">
    <div class="govuk-grid-column-full">
        <h1 class="govuk-heading-xl govuk-!-margin-bottom-6">Check your answers</h1>
        <govuk-inset-text>Application reference: <strong>@Model.ReferenceNumber</strong></govuk-inset-text>

        @if (!ViewData.ModelState.IsValid)
        {
            <govuk-error-summary>
                @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
                {
                    <govuk-error-summary-item>@error.ErrorMessage</govuk-error-summary-item>
                }
            </govuk-error-summary>
        }

        @foreach (var group in Model.Template.TaskGroups.OrderBy(g => g.GroupOrder))
        {

            var groupNameHyphenated = group.GroupName.Replace(" ", "-").ToLower();

            <h2 class="govuk-heading-m" id="group-@groupNameHyphenated" data-testid="group-@groupNameHyphenated">
                @group.GroupName
            </h2>

            @foreach (var task in group.Tasks.OrderBy(t => t.TaskOrder))
            {
                @if (task.Summary?.Mode?.Equals("multiCollectionFlow", StringComparison.OrdinalIgnoreCase) == true)
                {
                    // Multi-collection flow task: Display all flows in one table
                    var taskNameHyphenated = task.TaskName.Replace(" ", "-").ToLower();

                    <div class="govuk-summary-card govuk-!-margin-bottom-6" id="task-@taskNameHyphenated-summary">
                        <div class="govuk-summary-card__title-wrapper">
                            <h2 class="govuk-summary-card__title">@task.TaskName</h2>
                            @if (Model.IsApplicationEditable())
                            {
                                <ul class="govuk-summary-card__actions">
                                    <li class="govuk-summary-card__action">
                                        <a class="govuk-link" href="/applications/@Model.ReferenceNumber/@task.TaskId" id="task-@taskNameHyphenated-change-link">
                                            Change<span class="govuk-visually-hidden"> @task.TaskName</span>
                                        </a>
                                    </li>
                                </ul>
                            }
                        </div>
                        <div class="govuk-summary-card__content">
                            <dl class="govuk-summary-list">
                                @foreach (var (flow, flowIndex) in (task.Summary.Flows ?? new List<DfE.ExternalApplications.Domain.Models.MultiCollectionFlowConfiguration>()).Select((f, i) => (f, i)))
                                {
                                    var fieldId = flow.FieldId;
                                    Model.FormData.TryGetValue(fieldId, out var raw);
                                    var json = raw?.ToString() ?? "[]";
                                    
                                    List<Dictionary<string, object>> items = new();
                                    try { items = System.Text.Json.JsonSerializer.Deserialize<List<Dictionary<string, object>>>(json) ?? new(); } catch { }
                                    
                                    // Add flow header (no gray background, just bold text)
                                    <div class="govuk-summary-list__row">
                                        <dt class="govuk-summary-list__key" style="font-weight: bold;">
                                            @flow.Title
                                        </dt>
                                        <dd class="govuk-summary-list__value">
                                            <!-- Flow header -->
                                        </dd>
                                    </div>
                                    
                                    @if (items.Count == 0)
                                    {
                                        <div class="govuk-summary-list__row">
                                            <dt class="govuk-summary-list__key">
                                                No items added
                                            </dt>
                                            <dd class="govuk-summary-list__value">
                                                <span class="govuk-hint">Not answered</span>
                                            </dd>
                                        </div>
                                    }
                                    else
                                    {
                                        @foreach (var (item, itemIndex) in items.Select((item, i) => (item, i)))
                                        {
                                            var itemNumber = itemIndex + 1;
                                            // Use itemTitleBinding to get the proper label (e.g., "Member", "Person") instead of "Item"
                                            var itemLabel = flow.ItemTitleBinding ?? "Item";
                                            var displayTitle = $"{itemLabel} {itemNumber}";
                                            
                                            // Add item header (no gray background, just bold text)
                                            <div class="govuk-summary-list__row">
                                                <dt class="govuk-summary-list__key" style="font-weight: bold;">
                                                    @displayTitle
                                                </dt>
                                                <dd class="govuk-summary-list__value">
                                                    <!-- Item header - no value needed -->
                                                </dd>
                                            </div>
                                            
                                            // Display each field for this collection item
                                            @foreach (var col in (flow.SummaryColumns ?? new List<DfE.ExternalApplications.Domain.Models.FlowSummaryColumn>()).Where(c => !Model.IsFieldHiddenForItem(c.Field, item)))
                                            {
                                                var value = item.TryGetValue(col.Field, out var v) ? v?.ToString() : string.Empty;
                                                
                                                <div class="govuk-summary-list__row">
                                                    <dt class="govuk-summary-list__key">
                                                        @col.Label
                                                    </dt>
                                                    <dd class="govuk-summary-list__value">
                                                        @if (!string.IsNullOrEmpty(value))
                                                        {
                                                            // Temporarily set the item's field value into FormData and use the normal formatter
                                                            var originalValue = Model.FormData.TryGetValue(col.Field, out var orig) ? orig : null;
                                                            Model.FormData[col.Field] = value;
                                                            var formattedValues = Model.GetFormattedFieldValues(col.Field);
                                                            if (originalValue != null)
                                                                Model.FormData[col.Field] = originalValue;
                                                            else
                                                                Model.FormData.Remove(col.Field);

                                                            // Check if this is an upload field by looking at the raw value
                                                            var isUploadField = !string.IsNullOrEmpty(value) && value.StartsWith("[") && value.Contains("\"id\"");
                                                            
                                                            if (formattedValues.Count == 0)
                                                            {
                                                                <span class="govuk-hint">Not answered</span>
                                                            }
                                                            else if (formattedValues.Count == 1)
                                                            {
                                                                @if (isUploadField)
                                                                {
                                                                    // For upload fields, render as download link
                                                                    try
                                                                    {
                                                                        var uploadFiles = System.Text.Json.JsonSerializer.Deserialize<List<GovUK.Dfe.CoreLibs.Contracts.ExternalApplications.Models.Response.UploadDto>>(value);
                                                                        if (uploadFiles != null && uploadFiles.Any())
                                                                        {
                                                                            var file = uploadFiles.First();
                                                                            <form method="post" asp-page="/FormEngine/RenderForm" asp-route-referenceNumber="@Model.ReferenceNumber" asp-route-taskId="@task.TaskId" asp-page-handler="DownloadFile" style="display:inline">
                                                                                <input type="hidden" name="FileId" value="@file.Id" />
                                                                                <input type="hidden" name="ApplicationId" value="@Model.ApplicationId" />
                                                                                <button type="submit" class="govuk-link" style="border: none; background: none; padding: 0; color: #1d70b8; text-decoration: underline; cursor: pointer;">
                                                                                    @file.OriginalFileName
                                                                                </button>
                                                                            </form>
                                                                        }
                                                                        else
                                                                        {
                                                                            @Html.Raw(formattedValues.First())
                                                                        }
                                                                    }
                                                                    catch
                                                                    {
                                                                        @Html.Raw(formattedValues.First())
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    @Html.Raw(formattedValues.First())
                                                                }
                                                            }
                                                            else
                                                            {
                                                                @if (isUploadField)
                                                                {
                                                                    // For upload fields with multiple files, render each as download link
                                                                    try
                                                                    {
                                                                        var uploadFiles = System.Text.Json.JsonSerializer.Deserialize<List<GovUK.Dfe.CoreLibs.Contracts.ExternalApplications.Models.Response.UploadDto>>(value);
                                                                        if (uploadFiles != null && uploadFiles.Any())
                                                                        {
                                                                            @foreach (var file in uploadFiles)
                                                                            {
                                                                                <div>
                                                                                    <form method="post" asp-page="/FormEngine/RenderForm" asp-route-referenceNumber="@Model.ReferenceNumber" asp-route-taskId="@task.TaskId" asp-page-handler="DownloadFile" style="display:inline">
                                                                                        <input type="hidden" name="FileId" value="@file.Id" />
                                                                                        <input type="hidden" name="ApplicationId" value="@Model.ApplicationId" />
                                                                                        <button type="submit" class="govuk-link" style="border: none; background: none; padding: 0; color: #1d70b8; text-decoration: underline; cursor: pointer;">
                                                                                            @file.OriginalFileName
                                                                        </button>
                                                                    </form>
                                                                </div>
                                                            }
                                                        }
                                                        else
                                                        {
                                                            foreach (var fv in formattedValues)
                                                            {
                                                                <div>@Html.Raw(fv)</div>
                                                            }
                                                        }
                                                    }
                                                    catch
                                                    {
                                                        foreach (var fv in formattedValues)
                                                        {
                                                            <div>@Html.Raw(fv)</div>
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    foreach (var fv in formattedValues)
                                                    {
                                                        <div>@Html.Raw(fv)</div>
                                                    }
                                                }
                                            }
                                                        }
                                                        else
                                                        {
                                                            <span class="govuk-hint">Not answered</span>
                                                        }
                                                    </dd>
                                                </div>
                                            }
                                        }
                                    }
                                }
                            </dl>
                        </div>
                    </div>
                }
                else
                {
                    // Regular task: Display page/field data in single summary card
                    var taskNameHyphenated = task.TaskName.Replace(" ", "-").ToLower();

                    <div class="govuk-summary-card govuk-!-margin-bottom-6" id="task-@taskNameHyphenated-summary">
                        <div class="govuk-summary-card__title-wrapper">
                            <h2 class="govuk-summary-card__title">@task.TaskName</h2>
                            @if (Model.IsApplicationEditable())
                            {
                                <ul class="govuk-summary-card__actions">
                                    <li class="govuk-summary-card__action">
                                        <a class="govuk-link" href="/applications/@Model.ReferenceNumber/@task.TaskId" id="task-@taskNameHyphenated-change-link">
                                            Change<span class="govuk-visually-hidden"> @task.TaskName</span>
                                        </a>
                                    </li>
                                </ul>
                            }
                        </div>
                        <div class="govuk-summary-card__content">
                            <dl class="govuk-summary-list">
                                @foreach (var page in (task.Pages ?? new List<DfE.ExternalApplications.Domain.Models.Page>()).OrderBy(p => p.PageOrder))
                                {
                                    @foreach (var field in page.Fields.OrderBy(f => f.Order).Where(f => !Model.IsFieldHidden(f.FieldId)))
                                    {
                                        var fieldValue = Model.GetFieldValue(field.FieldId);
                                        var hasValue = Model.HasFieldValue(field.FieldId);
                                
                                                                                 if ((field.Type == "autocomplete" || field.Type == "complexField" || field.Type == "upload") && hasValue)
                                         {
                                             // Handle multiple autocomplete/complex field values as main header + individual rows
                                             var formattedValues = Model.GetFormattedFieldValues(field.FieldId);
                                             var itemLabel = Model.GetFieldItemLabel(field.FieldId);
                                             var allowMultiple = Model.IsFieldAllowMultiple(field.FieldId);
                                             
                                             // Check if this is an upload field by looking at the raw value
                                             var isUploadField = !string.IsNullOrEmpty(fieldValue) && fieldValue.StartsWith("[") && fieldValue.Contains("\"id\"");
                                     
                                             // Show main field header
                                             <div class="govuk-summary-list__row">
                                                 <dt class="govuk-summary-list__key">
                                                     @field.Label.Value
                                                 </dt>
                                                 <dd class="govuk-summary-list__value">
                                                     @if (formattedValues.Count == 0)
                                                     {
                                                         <span class="govuk-hint">Not answered</span>
                                                     }
                                                     else if (!allowMultiple)
                                                     {
                                                         @if (isUploadField)
                                                         {
                                                             // For upload fields, render as download link
                                                             try
                                                             {
                                                                 var uploadFiles = System.Text.Json.JsonSerializer.Deserialize<List<GovUK.Dfe.CoreLibs.Contracts.ExternalApplications.Models.Response.UploadDto>>(fieldValue);
                                                                 if (uploadFiles != null && uploadFiles.Any())
                                                                 {
                                                                     var file = uploadFiles.First();
                                                                     <form method="post" asp-page="/FormEngine/RenderForm" asp-route-referenceNumber="@Model.ReferenceNumber" asp-route-taskId="@task.TaskId" asp-page-handler="DownloadFile" style="display:inline">
                                                                         <input type="hidden" name="FileId" value="@file.Id" />
                                                                         <input type="hidden" name="ApplicationId" value="@Model.ApplicationId" />
                                                                         <button type="submit" class="govuk-link" style="border: none; background: none; padding: 0; color: #1d70b8; text-decoration: underline; cursor: pointer;">
                                                                             @file.OriginalFileName
                                                                         </button>
                                                                     </form>
                                                                 }
                                                                 else
                                                                 {
                                                                     @Html.Raw(formattedValues.FirstOrDefault())
                                                                 }
                                                             }
                                                             catch
                                                             {
                                                                 @Html.Raw(formattedValues.FirstOrDefault())
                                                             }
                                                         }
                                                         else
                                                         {
                                                             @Html.Raw(formattedValues.FirstOrDefault())
                                                         }
                                                     }
                                                 </dd>
                                             </div>

                                             // Show individual items if multiple selection is enabled
                                             @if (allowMultiple && formattedValues.Count > 0)
                                             {
                                                 @if (isUploadField)
                                                 {
                                                     // For upload fields with multiple files, render each as download link
                                                     try
                                                     {
                                                         var uploadFiles = System.Text.Json.JsonSerializer.Deserialize<List<GovUK.Dfe.CoreLibs.Contracts.ExternalApplications.Models.Response.UploadDto>>(fieldValue);
                                                         if (uploadFiles != null && uploadFiles.Any())
                                                         {
                                                             @foreach (var (file, index) in uploadFiles.Select((f, i) => (f, i)))
                                                             {
                                                                 <div class="govuk-summary-list__row">
                                                                     <dt class="govuk-summary-list__key">
                                                                         @itemLabel @(index + 1)
                                                                     </dt>
                                                                     <dd class="govuk-summary-list__value">
                                                                         <form method="post" asp-page="/FormEngine/RenderForm" asp-route-referenceNumber="@Model.ReferenceNumber" asp-route-taskId="@task.TaskId" asp-page-handler="DownloadFile" style="display:inline">
                                                                             <input type="hidden" name="FileId" value="@file.Id" />
                                                                             <input type="hidden" name="ApplicationId" value="@Model.ApplicationId" />
                                                                             <button type="submit" class="govuk-link" style="border: none; background: none; padding: 0; color: #1d70b8; text-decoration: underline; cursor: pointer;">
                                                                                 @file.OriginalFileName
                                                                             </button>
                                                                         </form>
                                                                     </dd>
                                                                 </div>
                                                             }
                                                         }
                                                     }
                                                     catch
                                                     {
                                                         // Fallback to original behavior if parsing fails
                                                         @foreach (var (value, index) in formattedValues.Select((v, i) => (v, i)))
                                                         {
                                                             <div class="govuk-summary-list__row">
                                                                 <dt class="govuk-summary-list__key">
                                                                     @itemLabel @(index + 1)
                                                                 </dt>
                                                                 <dd class="govuk-summary-list__value">
                                                                     @Html.Raw(value)
                                                                 </dd>
                                                                 </div>
                                                         }
                                                     }
                                                 }
                                                 else
                                                 {
                                                     @foreach (var (value, index) in formattedValues.Select((v, i) => (v, i)))
                                                     {
                                                         <div class="govuk-summary-list__row">
                                                             <dt class="govuk-summary-list__key">
                                                                 @itemLabel @(index + 1)
                                                             </dt>
                                                             <dd class="govuk-summary-list__value">
                                                                 @Html.Raw(value)
                                                             </dd>
                                                         </div>
                                                     }
                                                 }
                                             }
                                         }
                                        else
                                        {
                                            <div class="govuk-summary-list__row">
                                                <dt class="govuk-summary-list__key">
                                                    @field.Label.Value
                                                </dt>
                                                <dd class="govuk-summary-list__value">
                                                    @if (hasValue)
                                                    {
                                                        // Check if this is an upload field by looking at the raw value
                                                        var isUploadField = !string.IsNullOrEmpty(fieldValue) && fieldValue.StartsWith("[") && fieldValue.Contains("\"id\"");
                                                        
                                                        @if (isUploadField)
                                                        {
                                                            // For upload fields, render as download link
                                                            try
                                                            {
                                                                var uploadFiles = System.Text.Json.JsonSerializer.Deserialize<List<GovUK.Dfe.CoreLibs.Contracts.ExternalApplications.Models.Response.UploadDto>>(fieldValue);
                                                                if (uploadFiles != null && uploadFiles.Any())
                                                                {
                                                                    var file = uploadFiles.First();
                                                                    <form method="post" asp-page="/FormEngine/RenderForm" asp-route-referenceNumber="@Model.ReferenceNumber" asp-route-taskId="@task.TaskId" asp-page-handler="DownloadFile" style="display:inline">
                                                                        <input type="hidden" name="FileId" value="@file.Id" />
                                                                        <input type="hidden" name="ApplicationId" value="@Model.ApplicationId" />
                                                                        <button type="submit" class="govuk-link" style="border: none; background: none; padding: 0; color: #1d70b8; text-decoration: underline; cursor: pointer;">
                                                                            @file.OriginalFileName
                                                                        </button>
                                                                    </form>
                                                                }
                                                                else
                                                                {
                                                                    @Html.Raw(fieldValue.Replace("\r\n", "<br/>").Replace("\r", "<br/>").Replace("\n", "<br/>"))
                                                                }
                                                            }
                                                            catch
                                                            {
                                                                @Html.Raw(fieldValue.Replace("\r\n", "<br/>").Replace("\r", "<br/>").Replace("\n", "<br/>"))
                                                            }
                                                        }
                                                        else if (field.Type == "radios" && field.Options != null)
                                                        {
                                                            var selectedOption = field.Options.FirstOrDefault(o => o.Value == fieldValue);
                                                            @(selectedOption?.Label ?? fieldValue)
                                                        }
                                                        else if (field.Type == "select" && field.Options != null)
                                                        {
                                                            var selectedOption = field.Options.FirstOrDefault(o => o.Value == fieldValue);
                                                            @(selectedOption?.Label ?? fieldValue)
                                                        }
                                                        else
                                                        {
                                                            @Html.Raw(fieldValue.Replace("\r\n", "<br/>").Replace("\r", "<br/>").Replace("\n", "<br/>"))
                                                        }
                                                    }
                                                    else
                                                    {
                                                        <span class="govuk-hint">Not answered</span>
                                                    }
                                                </dd>
                                            </div>
                                        }
                                    }
                                }
                            </dl>
                        </div>
                    </div>
                }
            }
        }
    </div>
</div>

@if (Model.IsApplicationEditable() && isLeadApplicant)
{
    <div class="govuk-!-margin-top-6">
        <h2 class="govuk-heading-m govuk-!-margin-top-9">Submit your application</h2>
        <p class="govuk-body">By submitting this application you are confirming that, to the best of your knowledge, the details you are providing are correct.</p>


        <form method="post" asp-page-handler="SubmitApplication">
            <input type="hidden" asp-for="ReferenceNumber"/>
            @if (ViewContext.HttpContext.Request.Query.ContainsKey("preview"))
            {
                <input type="hidden" name="preview" value="true"/>
            }
            <govuk-button type="submit" id="submit-application-button">
                Submit
            </govuk-button>
        </form>
    </div>
}
else if (Model.IsApplicationEditable() && !isLeadApplicant)
{
    <div class="govuk-!-margin-top-6">
        <div class="govuk-inset-text">
            <p class="govuk-body">Only the lead applicant can submit this application.</p>
        </div>
    </div>
}
