@model RenderFormModel
@{
    var task = Model.CurrentTask;
    var summary = task?.Summary;
}

@if (!string.IsNullOrEmpty(Model.SuccessMessage))
{
    <div class="govuk-notification-banner govuk-notification-banner--success" role="alert" aria-labelledby="govuk-notification-banner-title" data-module="govuk-notification-banner">
        <div class="govuk-notification-banner__header">
            <h2 class="govuk-notification-banner__title" id="govuk-notification-banner-title">
                Success
            </h2>
        </div>
        <div class="govuk-notification-banner__content">
            <p class="govuk-notification-banner__heading">
                @Model.SuccessMessage
            </p>
        </div>
    </div>
}

@* Show validation errors *@
@if (!ViewData.ModelState.IsValid)
{
    var errorMessages = ViewData.ModelState.Values
        .SelectMany(v => v.Errors)
        .Where(e => !string.IsNullOrEmpty(e.ErrorMessage))
        .Select(e => e.ErrorMessage)
        .ToList();

    if (errorMessages.Any())
    {
        <div class="govuk-error-summary" data-module="govuk-error-summary">
            <div role="alert">
                <h2 class="govuk-error-summary__title">There is a problem</h2>
                <div class="govuk-error-summary__body">
                    @foreach (var errorMsg in errorMessages)
                    {
                        var lines = errorMsg.Split('\n', StringSplitOptions.RemoveEmptyEntries);
                        if (lines.Length > 1)
                        {
                            <p>@lines[0]</p>
                            <ul class="govuk-list govuk-list--bullet">
                                @foreach (var line in lines.Skip(1))
                                {
                                    <li><span class="govuk-visually-hidden">Error: </span>@line.TrimStart('â€¢', ' ')</li>
                                }
                            </ul>
                        }
                        else
                        {
                            <p><span class="govuk-visually-hidden">Error: </span>@errorMsg</p>
                        }
                    }
                </div>
            </div>
        </div>
    }
}

<div class="govuk-grid-row">
    <div class="govuk-grid-column-two-thirds">
        <h1 class="govuk-heading-l">@task?.TaskName</h1>

        @if (summary?.Flows != null)
        {
            // Multi-flow mode: render each flow section
            @foreach (var flow in summary.Flows)
            {
                @await Html.PartialAsync("~/Views/Shared/FormEngine/_SingleCollectionFlow.cshtml", new Tuple<RenderFormModel, DfE.ExternalApplications.Domain.Models.MultiCollectionFlowConfiguration>(Model, flow))
            }
        }

        @if (Model.IsApplicationEditable())
        {
            <form method="post" asp-page-handler="TaskSummary">
                <input type="hidden" asp-for="TaskId" />
                <input type="hidden" asp-for="ReferenceNumber" />
                
                <div class="govuk-checkboxes govuk-!-margin-top-6" data-module="govuk-checkboxes">
                    <div class="govuk-checkboxes__item">
                        <input class="govuk-checkboxes__input" id="IsTaskCompleted" name="IsTaskCompleted" type="checkbox" value="true" @(Model.IsTaskCompleted ? "checked" : "")>
                        <label class="govuk-label govuk-checkboxes__label" for="IsTaskCompleted">
                            Mark this section as complete, it's ready for review
                        </label>
                    </div>
                </div>

                <div class="govuk-button-group govuk-!-margin-top-6">
                    <govuk-button type="submit" id="save-task-summary-button">Save and continue</govuk-button>
                </div>
            </form>
        }
        else
        {
            <div class="govuk-inset-text govuk-!-margin-top-6">
                <p>This application has been submitted and can no longer be changed.</p>
                <p>Status: <strong>@Model.ApplicationStatus</strong></p>
            </div>
        }
    </div>
</div>


