@model DfE.ExternalApplications.Web.Pages.FormEngine.RenderFormModel
@inject DfE.ExternalApplications.Web.Services.IFieldRendererService FieldRenderer
@inject DfE.ExternalApplications.Application.Interfaces.IComplexFieldConfigurationService ComplexFieldConfigurationService

@{
    bool hasUploadField = Model.CurrentPage.Fields.Any(f =>
        f.Type == "complexField" &&
        f.ComplexField != null &&
        ComplexFieldConfigurationService
            .GetConfiguration(f.ComplexField.Id)
            .FieldType.Equals("upload", StringComparison.OrdinalIgnoreCase));

    string typeOfFirstField = Model.CurrentPage.Fields[0].Type;
    bool labelledByHeader = (Model.CurrentPage.Fields.Count == 1) && typeOfFirstField != "complexField";
}

<form method="post" id="form_@Model.CurrentPageId" asp-page-handler="Page">
    <input type="hidden" asp-for="CurrentPageId" />
    <input type="hidden" asp-for="TaskId" />
    <govuk-back-link href="/applications/@Model.ReferenceNumber/@Model.TaskId">Back</govuk-back-link>

    <h1 class="govuk-heading-xl govuk-!-margin-bottom-6">@Model.CurrentTask.TaskName</h1>

    <govuk-error-summary>
        @{
            var ModelStateWithFieldProps = from m in ViewData.ModelState
                                           join f in Model.CurrentPage.Fields on m.Key.ToString() equals f.FieldId
                                           select new { m, f };
        }
        @foreach (var s in ModelStateWithFieldProps.OrderBy(s => s.f.Order))
        {
            foreach (var e in s.m.Value.Errors)
            {
                var href = $"#Data_{s.m.Key.ToString()}";
                <govuk-error-summary-item href="@href">
                    @e.ErrorMessage
                </govuk-error-summary-item>
            }
        }
    </govuk-error-summary>

    @foreach (var field in Model.CurrentPage.Fields.OrderBy(f => f.Order))
    {
        var currentValue = Model.Data.TryGetValue(field.FieldId, out var val) ? val?.ToString() ?? String.Empty : String.Empty;

        var fieldModelState = ViewData.ModelState.Where(f => f.Key == field.FieldId).FirstOrDefault();
        var errorMessage = fieldModelState.Value?.Errors?.FirstOrDefault()?.ErrorMessage ?? String.Empty;

        if (labelledByHeader)
        {
            field.Label.IsVisible = false;
        }

        @* Only render non-upload fields inside the main form *@
        @if (field.Type != "complexField" ||
       field.ComplexField == null ||
       !ComplexFieldConfigurationService.GetConfiguration(field.ComplexField.Id).FieldType.Equals("upload", StringComparison.OrdinalIgnoreCase))
        {
            @await FieldRenderer.RenderFieldAsync(field, "Data", currentValue, errorMessage)
        }
    }

    @if (!hasUploadField)
    {
        <govuk-button type="submit" name="handler" value="Page" id="save-and-continue-button">Save and continue</govuk-button>
    }
</form>

@* Render upload fields outside the main form to avoid nesting *@
@if (hasUploadField)
{
    @foreach (var field in Model.CurrentPage.Fields.OrderBy(f => f.Order))
    {
        @if (field.Type == "complexField" &&
            field.ComplexField != null &&
            ComplexFieldConfigurationService.GetConfiguration(field.ComplexField.Id).FieldType.Equals("upload", StringComparison.OrdinalIgnoreCase))
        {
            var currentValue = Model.Data.TryGetValue(field.FieldId, out var val) ? val?.ToString() ?? String.Empty : String.Empty;
            var fieldModelState = ViewData.ModelState.Where(f => f.Key == field.FieldId).FirstOrDefault();
            var errorMessage = fieldModelState.Value?.Errors?.FirstOrDefault()?.ErrorMessage ?? String.Empty;

            @await FieldRenderer.RenderFieldAsync(field, "Data", currentValue, errorMessage)
        }
    }
}
