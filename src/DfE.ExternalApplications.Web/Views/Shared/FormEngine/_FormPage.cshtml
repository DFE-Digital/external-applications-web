@model DfE.ExternalApplications.Web.Pages.FormEngine.RenderFormModel
@inject DfE.ExternalApplications.Web.Services.IFieldRendererService FieldRenderer
@inject DfE.ExternalApplications.Application.Interfaces.IComplexFieldConfigurationService ComplexFieldConfigurationService

@{
    bool hasUploadField = Model.CurrentPage.Fields.Any(f =>
        f.Type == "complexField" &&
        f.ComplexField != null &&
        ComplexFieldConfigurationService
            .GetConfiguration(f.ComplexField.Id)
            .FieldType.Equals("upload", StringComparison.OrdinalIgnoreCase));

    string typeOfFirstField = Model.CurrentPage.Fields[0].Type;
    bool labelledByHeader = (Model.CurrentPage.Fields.Count == 1) && typeOfFirstField != "complexField";
    bool hasAutocompleteField = Model.CurrentPage.Fields.Any(f =>
        f.Type == "complexField" &&
        f.ComplexField != null &&
        ComplexFieldConfigurationService
            .GetConfiguration(f.ComplexField.Id)
            .FieldType.Equals("autocomplete", StringComparison.OrdinalIgnoreCase));
}

<form method="post" id="form_@Model.CurrentPageId"
      action="/applications/@Model.ReferenceNumber/@Model.TaskId/@Model.CurrentPageId?handler=Page">
    @Html.AntiForgeryToken()
    <input type="hidden" asp-for="CurrentPageId" />
    <input type="hidden" asp-for="TaskId" />
    <input type="hidden" asp-for="FlowId" />
    <input type="hidden" asp-for="InstanceId" />
    <govuk-back-link href="/applications/@Model.ReferenceNumber/@Model.TaskId">Back</govuk-back-link>

    <div class="govuk-grid-row">
        <div class="govuk-grid-column-two-thirds">

            <govuk-error-summary>
                @{
                    var ModelStateWithFieldProps = from m in ViewData.ModelState
                                                   join f in Model.CurrentPage.Fields on m.Key.ToString() equals f.FieldId
                                                   where !Model.IsFieldHidden(f.FieldId)
                                                   select new { m, f };
                }
                @foreach (var s in ModelStateWithFieldProps.OrderBy(s => s.f.Order))
                {
                    foreach (var e in s.m.Value.Errors)
                    {
                        var href = $"#Data_{s.m.Key.ToString()}";
                        <govuk-error-summary-item href="@href">
                            @e.ErrorMessage
                        </govuk-error-summary-item>
                    }
                }
            </govuk-error-summary>

            <legend class="govuk-fieldset__legend govuk-fieldset__legend--l">

                <h1 class="govuk-fieldset__heading" id="page-title">
                    <span class="govuk-caption-l">@Model.CurrentTask.TaskName</span>
                    @Model.CurrentPage.Title
                </h1>
            </legend>
            
            @if (!string.IsNullOrEmpty(Model.CurrentPage.Description))
            {
                <p class="govuk-body">@Model.CurrentPage.Description</p>
            }

            @foreach (var field in Model.CurrentPage.Fields.OrderBy(f => f.Order).Where(f => !Model.IsFieldHidden(f.FieldId)))
            {
                var currentValue = Model.Data.TryGetValue(field.FieldId, out var val) ? val?.ToString() ?? String.Empty : String.Empty;

                var fieldModelState = ViewData.ModelState.Where(f => f.Key == field.FieldId).FirstOrDefault();
                var errorMessage = fieldModelState.Value?.Errors?.FirstOrDefault()?.ErrorMessage ?? String.Empty;

                if (labelledByHeader)
                {
                    field.Label.IsVisible = false;
                }

                @* Only render non-upload fields inside the main form *@
                @if (field.Type != "complexField" ||
               field.ComplexField == null ||
               !ComplexFieldConfigurationService.GetConfiguration(field.ComplexField.Id).FieldType.Equals("upload", StringComparison.OrdinalIgnoreCase))
                {
                    @await FieldRenderer.RenderFieldAsync(field, "Data", currentValue, errorMessage)
                }
            }

            @if (!hasUploadField && !hasAutocompleteField)
            {
                // Check if we're in a sub-flow and if this is the last page
                bool isLastPageInFlow = false;
                string buttonText = "Save and continue";
                
                // Parse the pageId to detect sub-flow (same logic as in RenderForm.cshtml.cs)
                if (!string.IsNullOrEmpty(Model.CurrentPageId))
                {
                    var parts = Model.CurrentPageId.Split('/', StringSplitOptions.RemoveEmptyEntries);
                    if (parts.Length >= 3 && parts[0].Equals("flow", StringComparison.OrdinalIgnoreCase))
                    {
                        string flowId = parts[1];
                        
                        // Find the specific flow by flowId in multi-collection flow mode
                        var flow = Model.CurrentTask?.Summary?.Flows?.FirstOrDefault(f => f.FlowId == flowId);
                        var flowPages = flow?.Pages;
                        
                        if (flowPages != null)
                        {
                            var currentPageIndex = flowPages.FindIndex(p => p.PageId == Model.CurrentPage.PageId);
                            isLastPageInFlow = currentPageIndex == flowPages.Count - 1;
                        }
                        
                        buttonText = isLastPageInFlow ? "Save and continue" : "Continue";
                    }
                }
                
                <govuk-button type="submit" name="handler" value="Page" id="save-and-continue-button">@buttonText</govuk-button>
            }
        </div>
    </div>
</form>

@* Render upload fields outside the main form to avoid nesting *@
@if (hasUploadField)
{
    @foreach (var field in Model.CurrentPage.Fields.OrderBy(f => f.Order).Where(f => !Model.IsFieldHidden(f.FieldId)))
    {
        @if (field.Type == "complexField" &&
           field.ComplexField != null &&
           ComplexFieldConfigurationService.GetConfiguration(field.ComplexField.Id).FieldType.Equals("upload", StringComparison.OrdinalIgnoreCase))
        {
            var currentValue = Model.Data.TryGetValue(field.FieldId, out var val) ? val?.ToString() ?? String.Empty : String.Empty;
            var fieldModelState = ViewData.ModelState.Where(f => f.Key == field.FieldId).FirstOrDefault();
            var errorMessage = fieldModelState.Value?.Errors?.FirstOrDefault()?.ErrorMessage ?? String.Empty;

            @await FieldRenderer.RenderFieldAsync(field, "Data", currentValue, errorMessage)
        }
    }
}

@* Conditional Logic Scripts (temporarily disabled if not present on template) *@

@if (Model.Data?.Any() == true)
{
    <script id="initial-form-data" type="application/json">
        @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.Data))
    </script>
}

<script src="~/js/conditionalLogic.js"></script>
