@using DfE.ExternalApplications.Web.Extensions
@using GovUk.Frontend.AspNetCore.TagHelpers
@using System.Text.Json
@using DfE.ExternalApplications.Web.Utilities
@inject DfE.ExternalApplications.Application.Interfaces.IComplexFieldConfigurationService ComplexFieldConfigurationService
@model Tuple<DfE.ExternalApplications.Web.Pages.FormEngine.RenderFormModel, DfE.ExternalApplications.Domain.Models.MultiCollectionFlowConfiguration>
@{
    var renderModel = Model.Item1;
    var flow = Model.Item2;
    
    // Read collection from accumulated form data. We store as JSON string under fieldId
    renderModel.FormData.TryGetValue(flow.FieldId, out var raw);
    var json = raw?.ToString() ?? "[]";
    
    List<Dictionary<string, object>> items = new();
    try { items = System.Text.Json.JsonSerializer.Deserialize<List<Dictionary<string, object>>>(json) ?? new(); } catch { }
    var itemLabel = flow.ItemTitleBinding ?? "Item";
}

<div class="govuk-!-margin-bottom-8">
    <h2 class="govuk-heading-m">@flow.Title</h2>
    
    @{
        var (hintHtml, hintClass) = MarkdownSafe.RenderHintWithClass(flow.Description);
    }

    @if (!string.IsNullOrEmpty(flow.Description))
    {
        <p class="govuk-body">@Html.Raw(hintHtml)</p>
    }

    @if (items.Any())
    {
        @if (flow.TableType?.Equals("list", StringComparison.OrdinalIgnoreCase) == true)
        {
            @* List style: Simple govuk-summary-list without cards *@
            <dl class="govuk-summary-list">
                @foreach (var (item, index) in items.Select((item, i) => (item, i)))
                {
                    var memberNumber = index + 1;
                    var memberTitle = item.TryGetValue(flow.ItemTitleBinding ?? "id", out var titleValue) && !string.IsNullOrEmpty(titleValue?.ToString())
                                    ? titleValue.ToString()
                                    : $"{itemLabel} {memberNumber}";
                    
                    @* Add separator header for each item (except first) *@
                    @if (index > 0)
                    {
                        <div class="govuk-summary-list__row" style="border-top: 2px solid #d1d1d1; margin-top: 15px; padding-top: 15px;">
                            <dt class="govuk-summary-list__key" style="font-weight: bold;">
                                @memberTitle
                            </dt>
                            <dd class="govuk-summary-list__value">
                                <!-- Item header -->
                            </dd>
                            <dd class="govuk-summary-list__actions">
                                <form method="post" style="display: inline;" asp-page="/FormEngine/RenderForm" asp-page-handler="RemoveCollectionItem">
                                    <input type="hidden" name="referenceNumber" value="@renderModel.ReferenceNumber" />
                                    <input type="hidden" name="taskId" value="@renderModel.TaskId" />
                                    <input type="hidden" name="flowId" value="@flow.FlowId" />
                                    <input type="hidden" name="fieldId" value="@flow.FieldId" />
                                    <input type="hidden" name="itemId" value="@(item.TryGetValue("id", out var itemIdValue) ? itemIdValue?.ToString() : "")" />
                                    <input type="hidden" name="itemTitle" value="@memberTitle" />
                                    @Html.RenderLinkConfirmationButton(
                                        buttonText: "Remove",
                                        handler: "RemoveCollectionItem",
                                        displayFields: "itemTitle",
                                        title:$"Please confirm removal of the following {itemLabel.ToLower()}",
                                        buttonId: $"remove-flow-item-@memberNumber")
                                </form>
                            </dd>
                        </div>
                    }
                    else
                    {
                        @* First item header without border *@
                        <div class="govuk-summary-list__row">
                            <dt class="govuk-summary-list__key" style="font-weight: bold;">
                                @memberTitle
                            </dt>
                            <dd class="govuk-summary-list__value">
                                <!-- Item header -->
                            </dd>
                            <dd class="govuk-summary-list__actions">
                                <form method="post" style="display: inline;" asp-page="/FormEngine/RenderForm" asp-page-handler="RemoveCollectionItem">
                                    <input type="hidden" name="referenceNumber" value="@renderModel.ReferenceNumber" />
                                    <input type="hidden" name="taskId" value="@renderModel.TaskId" />
                                    <input type="hidden" name="flowId" value="@flow.FlowId" />
                                    <input type="hidden" name="fieldId" value="@flow.FieldId" />
                                    <input type="hidden" name="itemId" value="@(item.TryGetValue("id", out var itemIdValue2) ? itemIdValue2?.ToString() : "")" />
                                    <input type="hidden" name="itemTitle" value="@memberTitle" />
                                    @Html.RenderLinkConfirmationButton(
                                        buttonText: "Remove",
                                        handler: "RemoveCollectionItem",
                                        displayFields: "itemTitle",
                                        title: $"Please confirm removal of the following {itemLabel.ToLower()}",
                                        buttonId: $"remove-flow-item-@memberNumber")
                                </form>
                            </dd>
                        </div>
                    }
                    
                                          @* Item fields *@
                     @foreach (var col in (flow.SummaryColumns ?? new List<DfE.ExternalApplications.Domain.Models.FlowSummaryColumn>()).Where(c => !renderModel.IsFieldHiddenForItem(c.Field, item)))
                    {
                        var valueObj = item.TryGetValue(col.Field, out var v) ? v : null;
                        var value = valueObj is string sv ? sv :
                                    valueObj is System.Text.Json.JsonElement je ? je.ToString() :
                                    (valueObj != null ? System.Text.Json.JsonSerializer.Serialize(valueObj) : string.Empty);

                        // Find which page contains this field within this flow
                        var targetPage = flow.Pages?.FirstOrDefault(p => p.Fields.Any(f => f.FieldId == col.Field));
                        var pageId = targetPage?.PageId ?? flow.Pages?.FirstOrDefault()?.PageId ?? "";
                        // Detect field type for special rendering (upload vs autocomplete)
                        var fieldConfig = targetPage?.Fields.FirstOrDefault(f => f.FieldId == col.Field);
                        var isAutocompleteField = false;
                        var isUploadFieldByConfig = false;
                        if (fieldConfig != null && fieldConfig.Type == "complexField" && fieldConfig.ComplexField != null)
                        {
                            var cfg = ComplexFieldConfigurationService.GetConfiguration(fieldConfig.ComplexField.Id);
                            isAutocompleteField = string.Equals(cfg.FieldType, "autocomplete", StringComparison.OrdinalIgnoreCase);
                            isUploadFieldByConfig = string.Equals(cfg.FieldType, "upload", StringComparison.OrdinalIgnoreCase);
                        }
                        
                        <div class="govuk-summary-list__row">
                            <dt class="govuk-summary-list__key">
                                @col.Label
                            </dt>
                            <dd class="govuk-summary-list__value">
                                @if (!string.IsNullOrEmpty(value))
                                {
                                    // Temporarily add this item's field data to FormData for formatting
                                    var originalValue = renderModel.FormData.TryGetValue(col.Field, out var orig) ? orig : null;
                                    renderModel.FormData[col.Field] = value;
                                    var formattedValues = renderModel.GetFormattedFieldValues(col.Field);
                                    // Restore original value
                                    if (originalValue != null)
                                        renderModel.FormData[col.Field] = originalValue;
                                    else
                                        renderModel.FormData.Remove(col.Field);
                                    
                                    // Determine if this is an upload field
                                    var isUploadField = isUploadFieldByConfig || (!string.IsNullOrEmpty(value) && value.StartsWith("[") && value.Contains("\"id\""));
                                    // If autocomplete field and current value is empty, try to infer from item values
                                    if (isAutocompleteField && string.IsNullOrEmpty(value))
                                    {
                                        var inferred = TryFindAutocompleteJsonInItem(item);
                                        if (!string.IsNullOrEmpty(inferred))
                                        {
                                            value = inferred;
                                        }
                                    }
                                    
                                    @if (formattedValues.Count == 0)
                                    {
                                        <span class="govuk-hint">Not answered</span>
                                    }
                                    else if (formattedValues.Count == 1)
                                    {
                                        @if (isUploadField)
                                        {
                                            // For upload fields, render as download link
                                            try
                                            {
                                                var uploadFiles = System.Text.Json.JsonSerializer.Deserialize<List<GovUK.Dfe.CoreLibs.Contracts.ExternalApplications.Models.Response.UploadDto>>(value);
                                                if (uploadFiles != null && uploadFiles.Any())
                                                {
                                                    var file = uploadFiles.First();
                                                    <form method="post" asp-page="/FormEngine/RenderForm" asp-route-referenceNumber="@renderModel.ReferenceNumber" asp-route-taskId="@renderModel.TaskId" asp-route-pageId="@(pageId)" asp-page-handler="DownloadFile" style="display:inline">
                                                        <input type="hidden" name="FileId" value="@file.Id" />
                                                        <input type="hidden" name="ApplicationId" value="@renderModel.ApplicationId" />
                                                        <button type="submit" class="govuk-link" style="border: none; background: none; padding: 0; color: #1d70b8; text-decoration: underline; cursor: pointer;">
                                                            @file.OriginalFileName
                                                        </button>
                                                    </form>
                                                }
                                                else
                                                {
                                                    @Html.Raw(formattedValues.First())
                                                }
                                            }
                                            catch
                                            {
                                                @Html.Raw(formattedValues.First())
                                            }
                                        }
                                        else if (isAutocompleteField)
                                        {
                                            var html = RenderAutocompleteSummary(value);
                                            @Html.Raw(html)
                                        }
                                        else
                                        {
                                            @Html.Raw(formattedValues.First())
                                        }
                                    }
                                    else
                                    {
                                        @if (isUploadField)
                                        {
                                            // For upload fields with multiple files, render each as download link
                                            try
                                            {
                                                var uploadFiles = System.Text.Json.JsonSerializer.Deserialize<List<GovUK.Dfe.CoreLibs.Contracts.ExternalApplications.Models.Response.UploadDto>>(value);
                                                if (uploadFiles != null && uploadFiles.Any())
                                                {
                                                    @foreach (var file in uploadFiles)
                                                    {
                                                        <div>
                                                            <form method="post" asp-page="/FormEngine/RenderForm" asp-route-referenceNumber="@renderModel.ReferenceNumber" asp-route-taskId="@renderModel.TaskId" asp-route-pageId="@(pageId)" asp-page-handler="DownloadFile" style="display:inline">
                                                                <input type="hidden" name="FileId" value="@file.Id" />
                                                                <input type="hidden" name="ApplicationId" value="@renderModel.ApplicationId" />
                                                                <button type="submit" class="govuk-link" style="border: none; background: none; padding: 0; color: #1d70b8; text-decoration: underline; cursor: pointer;">
                                                                    @file.OriginalFileName
                                                                </button>
                                                            </form>
                                                        </div>
                                                    }
                                                }
                                                else
                                                {
                                                    <!-- Multiple values - display as a list -->
                                                    @foreach (var formattedValue in formattedValues)
                                                    {
                                                        <div>@Html.Raw(formattedValue)</div>
                                                    }
                                                }
                                            }
                                            catch
                                            {
                                                <!-- Multiple values - display as a list -->
                                                @foreach (var formattedValue in formattedValues)
                                                {
                                                    <div>@Html.Raw(formattedValue)</div>
                                                }
                                            }
                                        }
                                        else
                                        {
                                            <!-- Multiple values - display as a list -->
                                            @foreach (var formattedValue in formattedValues)
                                            {
                                                <div>@Html.Raw(formattedValue)</div>
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    <span class="govuk-hint">Not answered</span>
                                }
                            </dd>
                            <dd class="govuk-summary-list__actions">
                                <a class="govuk-link" href="/applications/@renderModel.ReferenceNumber/@renderModel.TaskId/flow/@flow.FlowId/@(item.TryGetValue("id", out var changeItemIdValue) ? changeItemIdValue?.ToString() : "")/@pageId">
                                    Change<span class="govuk-visually-hidden"> @col.Label for @memberTitle</span>
                                </a>
                            </dd>
                        </div>
                    }
                }
            </dl>
        }
        else
        {
            @* Card style: Current govuk-summary-card approach (default) *@
            @foreach (var (item, index) in items.Select((item, i) => (item, i)))
            {
                var memberNumber = index + 1;
                var memberTitle = item.TryGetValue(flow.ItemTitleBinding ?? "id", out var titleValue) && !string.IsNullOrEmpty(titleValue?.ToString())
                                ? titleValue.ToString()
                                : $"{itemLabel} {memberNumber}";
                
                <div class="govuk-summary-card govuk-!-margin-bottom-6">
                    <div class="govuk-summary-card__title-wrapper">
                        <h3 class="govuk-summary-card__title">@memberTitle</h3>
                        <ul class="govuk-summary-card__actions">
                            <li class="govuk-summary-card__action">
                                <form method="post" style="display: inline;" asp-page="/FormEngine/RenderForm" asp-page-handler="RemoveCollectionItem">
                                    <input type="hidden" name="referenceNumber" value="@renderModel.ReferenceNumber" />
                                    <input type="hidden" name="taskId" value="@renderModel.TaskId" />
                                    <input type="hidden" name="flowId" value="@flow.FlowId" />
                                    <input type="hidden" name="fieldId" value="@flow.FieldId" />
                                    <input type="hidden" name="itemId" value="@(item.TryGetValue("id", out var itemIdValue) ? itemIdValue?.ToString() : "")" />
                                    <input type="hidden" name="itemTitle" value="@memberTitle" />
                                    @Html.RenderLinkConfirmationButton(
                                        buttonText: "Remove",
                                        handler: "RemoveCollectionItem",
                                        displayFields: "itemTitle",
                                        title: $"Please confirm removal of the following {itemLabel.ToLower()}",
                                        buttonId: $"remove-flow-item-@memberNumber")
                                </form>
                            </li>
                        </ul>
                    </div>
                                          <div class="govuk-summary-card__content">
                          <dl class="govuk-summary-list">
                             @foreach (var col in (flow.SummaryColumns ?? new List<DfE.ExternalApplications.Domain.Models.FlowSummaryColumn>()).Where(c => !renderModel.IsFieldHiddenForItem(c.Field, item)))
                            {
                                var valueObj = item.TryGetValue(col.Field, out var v) ? v : null;
                                var value = valueObj is string sv ? sv :
                                            valueObj is System.Text.Json.JsonElement je ? je.ToString() :
                                            (valueObj != null ? System.Text.Json.JsonSerializer.Serialize(valueObj) : string.Empty);
                                // Find which page contains this field within this flow
                                var targetPage = flow.Pages?.FirstOrDefault(p => p.Fields.Any(f => f.FieldId == col.Field));
                                var pageId = targetPage?.PageId ?? flow.Pages?.FirstOrDefault()?.PageId ?? "";
                                // Detect field type for special rendering (upload vs autocomplete)
                                var fieldConfig = targetPage?.Fields.FirstOrDefault(f => f.FieldId == col.Field);
                                var isAutocompleteField = false;
                                var isUploadFieldByConfig = false;
                                if (fieldConfig != null && fieldConfig.Type == "complexField" && fieldConfig.ComplexField != null)
                                {
                                    var cfg = ComplexFieldConfigurationService.GetConfiguration(fieldConfig.ComplexField.Id);
                                    isAutocompleteField = string.Equals(cfg.FieldType, "autocomplete", StringComparison.OrdinalIgnoreCase);
                                    isUploadFieldByConfig = string.Equals(cfg.FieldType, "upload", StringComparison.OrdinalIgnoreCase);
                                }
                                // If autocomplete field and current value is empty, try to infer from item values
                                if (isAutocompleteField && string.IsNullOrEmpty(value))
                                {
                                    var inferred = TryFindAutocompleteJsonInItem(item);
                                    if (!string.IsNullOrEmpty(inferred))
                                    {
                                        value = inferred;
                                    }
                                }
                                
                                <div class="govuk-summary-list__row">
                                    <dt class="govuk-summary-list__key">
                                        @col.Label
                                    </dt>
                                    <dd class="govuk-summary-list__value">
                                        @if (!string.IsNullOrEmpty(value))
                                        {
                                            // Temporarily add this item's field data to FormData for formatting
                                            var originalValue = renderModel.FormData.TryGetValue(col.Field, out var orig) ? orig : null;
                                            renderModel.FormData[col.Field] = value;
                                            var formattedValues = renderModel.GetFormattedFieldValues(col.Field);
                                            // Restore original value
                                            if (originalValue != null)
                                                renderModel.FormData[col.Field] = originalValue;
                                            else
                                                renderModel.FormData.Remove(col.Field);
                                            
                                            // Determine if this is an upload field
                                            var isUploadField = isUploadFieldByConfig || (!string.IsNullOrEmpty(value) && value.StartsWith("[") && value.Contains("\"id\""));
                                            
                                            
                                            @if (formattedValues.Count == 0)
                                            {
                                                <span class="govuk-hint">Not answered</span>
                                            }
                                            else if (formattedValues.Count == 1)
                                            {
                                                @if (isUploadField)
                                                {
                                                    // For upload fields, render as download link
                                                    try
                                                    {
                                                        var uploadFiles = System.Text.Json.JsonSerializer.Deserialize<List<GovUK.Dfe.CoreLibs.Contracts.ExternalApplications.Models.Response.UploadDto>>(value);
                                                        if (uploadFiles != null && uploadFiles.Any())
                                                        {
                                                            var file = uploadFiles.First();
                                                            <form method="post" asp-page="/FormEngine/RenderForm" asp-route-referenceNumber="@renderModel.ReferenceNumber" asp-route-taskId="@renderModel.TaskId" asp-route-pageId="@(pageId)" asp-page-handler="DownloadFile" style="display:inline">
                                                                <input type="hidden" name="FileId" value="@file.Id" />
                                                                <input type="hidden" name="ApplicationId" value="@renderModel.ApplicationId" />
                                                                <button type="submit" class="govuk-link" style="border: none; background: none; padding: 0; color: #1d70b8; text-decoration: underline; cursor: pointer;">
                                                                    @file.OriginalFileName
                                                                </button>
                                                            </form>
                                                        }
                                                        else
                                                        {
                                                            @Html.Raw(formattedValues.First())
                                                        }
                                                    }
                                                    catch
                                                    {
                                                        @Html.Raw(formattedValues.First())
                                                    }
                                                }
                                                else if (isAutocompleteField)
                                                {
                                                    var html = RenderAutocompleteSummary(value);
                                                    @Html.Raw(html)
                                                }
                                                else
                                                {
                                                    @Html.Raw(formattedValues.First())
                                                }
                                            }
                                            else
                                            {
                                                @if (isUploadField)
                                                {
                                                    // For upload fields with multiple files, render each as download link
                                                    try
                                                    {
                                                        var uploadFiles = System.Text.Json.JsonSerializer.Deserialize<List<GovUK.Dfe.CoreLibs.Contracts.ExternalApplications.Models.Response.UploadDto>>(value);
                                                        if (uploadFiles != null && uploadFiles.Any())
                                                        {
                                                            @foreach (var file in uploadFiles)
                                                            {
                                                                <div>
                                                                    <form method="post" asp-page="/FormEngine/RenderForm" asp-route-referenceNumber="@renderModel.ReferenceNumber" asp-route-taskId="@renderModel.TaskId" asp-route-pageId="@(pageId)" asp-page-handler="DownloadFile" style="display:inline">
                                                                        <input type="hidden" name="FileId" value="@file.Id" />
                                                                        <input type="hidden" name="ApplicationId" value="@renderModel.ApplicationId" />
                                                                        <button type="submit" class="govuk-link" style="border: none; background: none; padding: 0; color: #1d70b8; text-decoration: underline; cursor: pointer;">
                                                                            @file.OriginalFileName
                                                                        </button>
                                                                    </form>
                                                                </div>
                                                            }
                                                        }
                                                        else
                                                        {
                                                            <!-- Multiple values - display as a list -->
                                                            @foreach (var formattedValue in formattedValues)
                                                            {
                                                                <div>@Html.Raw(formattedValue)</div>
                                                            }
                                                        }
                                                    }
                                                    catch
                                                    {
                                                        <!-- Multiple values - display as a list -->
                                                        @foreach (var formattedValue in formattedValues)
                                                        {
                                                            <div>@Html.Raw(formattedValue)</div>
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    <!-- Multiple values - display as a list -->
                                                    @foreach (var formattedValue in formattedValues)
                                                    {
                                                        <div>@Html.Raw(formattedValue)</div>
                                                    }
                                                }
                                            }
                                        }
                                        else
                                        {
                                            <span class="govuk-hint">Not answered</span>
                                        }
                                    </dd>
                                    <dd class="govuk-summary-list__actions">
                                        <a class="govuk-link" href="/applications/@renderModel.ReferenceNumber/@renderModel.TaskId/flow/@flow.FlowId/@(item.TryGetValue("id", out var changeItemIdValue) ? changeItemIdValue?.ToString() : "")/@pageId">
                                            Change<span class="govuk-visually-hidden"> @col.Label for @memberTitle</span>
                                        </a>
                                    </dd>
                                </div>
                            }
                        </dl>
                    </div>
                </div>
            }
        }
    }
    else
    {
        <div class="govuk-inset-text">
            No @(itemLabel.ToLowerInvariant())s have been added.
        </div>
    }

    <div class="govuk-!-margin-bottom-4">
        <a class="govuk-button" href="/applications/@renderModel.ReferenceNumber/@renderModel.TaskId/flow/@flow.FlowId/@Guid.NewGuid()">@flow.AddButtonLabel</a>
    </div>
</div>
@functions{
    // Builds HTML matching confirmation page formatting for a single autocomplete selection
    private static string RenderAutocompleteSummary(string rawValue)
    {
        if (string.IsNullOrWhiteSpace(rawValue)) return string.Empty;
        try
        {
            using var doc = JsonDocument.Parse(rawValue);
            if (doc.RootElement.ValueKind != JsonValueKind.Object)
            {
                return System.Net.WebUtility.HtmlEncode(rawValue);
            }

            var root = doc.RootElement;
            string name = root.TryGetProperty("name", out var n) && n.ValueKind == JsonValueKind.String ? n.GetString() ?? string.Empty : string.Empty;
            string ukprn = root.TryGetProperty("ukprn", out var u) ? u.ToString() : string.Empty;
            string ch = root.TryGetProperty("companiesHouseNumber", out var c) && c.ValueKind == JsonValueKind.String ? c.GetString() ?? string.Empty : string.Empty;
            if (string.IsNullOrWhiteSpace(ch) && root.TryGetProperty("companiesHousenumber", out var c2)) ch = c2.ToString();

            var sb = new System.Text.StringBuilder();
            if (!string.IsNullOrWhiteSpace(name)) sb.Append($"<strong class=\"govuk-!-font-weight-bold\">{System.Net.WebUtility.HtmlEncode(name)}</strong>");
            if (!string.IsNullOrWhiteSpace(ukprn)) sb.Append($"<br/>UKPRN: {System.Net.WebUtility.HtmlEncode(ukprn)}");
            if (!string.IsNullOrWhiteSpace(ch)) sb.Append($"<br/>Companies house number: {System.Net.WebUtility.HtmlEncode(ch)}");
            return sb.ToString();
        }
        catch
        {
            return System.Net.WebUtility.HtmlEncode(rawValue);
        }
    }

    // Heuristic: find a likely autocomplete JSON object in the item's values
    private static string TryFindAutocompleteJsonInItem(Dictionary<string, object> item)
    {
        foreach (var kv in item)
        {
            var s = kv.Value?.ToString();
            if (string.IsNullOrWhiteSpace(s)) continue;
            try
            {
                using var doc = JsonDocument.Parse(s);
                if (doc.RootElement.ValueKind == JsonValueKind.Object)
                {
                    if (doc.RootElement.TryGetProperty("name", out _) ||
                        doc.RootElement.TryGetProperty("ukprn", out _) ||
                        doc.RootElement.TryGetProperty("companiesHouseNumber", out _))
                    {
                        return s;
                    }
                }
            }
            catch { }
        }
        return string.Empty;
    }
}
