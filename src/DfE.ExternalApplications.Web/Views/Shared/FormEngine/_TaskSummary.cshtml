@model DfE.ExternalApplications.Web.Pages.FormEngine.RenderFormModel
@inject Application.Interfaces.IComplexFieldConfigurationService ComplexFieldConfigurationService
@using System.Text.Json

<govuk-back-link href="/applications/@Model.ReferenceNumber">Back to application task list</govuk-back-link>

<h1 class="govuk-heading-xl govuk-!-margin-bottom-6">@Model.CurrentTask.TaskName</h1>

<dl class="govuk-summary-list">
    @foreach (var page in (Model.CurrentTask.Pages ?? new List<DfE.ExternalApplications.Domain.Models.Page>()).OrderBy(p => p.PageOrder).Where(p => !Model.IsPageHidden(p.PageId)))
    {
        @foreach (var field in page.Fields.OrderBy(f => f.Order).Where(f => !Model.IsFieldHidden(f.FieldId)))
        {
            var fieldValue = Model.GetFieldValue(field.FieldId);
            var hasValue = Model.HasFieldValue(field.FieldId);
            var changeUrl = $"/applications/{Model.ReferenceNumber}/{Model.TaskId}/{page.PageId}";

            var fieldIdHyphenated = field.FieldId.Replace(" ", "-").ToLower();

            // DEBUG: Log field visibility info for complex fields
            if (field.Type == "complexField")
            {
                var complexFieldType = field.ComplexField != null ? ComplexFieldConfigurationService.GetConfiguration(field.ComplexField.Id).FieldType : "null";

            }
            
            // DEBUG: Log all field checks


            // Show complex fields if they have value OR if they're upload fields that should be visible
            bool shouldShowComplexField = hasValue || 
                (field.Type == "complexField" && field.ComplexField != null && 
                 ComplexFieldConfigurationService.GetConfiguration(field.ComplexField.Id).FieldType.Equals("upload", StringComparison.OrdinalIgnoreCase));
                 
            if ((field.Type == "autocomplete" || field.Type == "complexField") && shouldShowComplexField)
            {
                // Handle multiple autocomplete/complex field values as main header + individual rows
                var formattedValues = Model.GetFormattedFieldValues(field.FieldId);
                var itemLabel = Model.GetFieldItemLabel(field.FieldId);
                var allowMultiple = Model.IsFieldAllowMultiple(field.FieldId);
                
                // Check if this is specifically an autocomplete complex field (not upload or other types)
                var isAutocompleteField = field.Type == "autocomplete" || 
                    (field.Type == "complexField" && field.ComplexField != null && 
                     ComplexFieldConfigurationService.GetConfiguration(field.ComplexField.Id).FieldType.Equals("autocomplete", StringComparison.OrdinalIgnoreCase));

                // Check if this is an upload field
                var isUploadField = field.Type == "complexField" && field.ComplexField != null && 
                    ComplexFieldConfigurationService.GetConfiguration(field.ComplexField.Id).FieldType.Equals("upload", StringComparison.OrdinalIgnoreCase);

                var itemLabelHyphenated = itemLabel.Replace(" ", "-").ToLower();

                // Show main field header with change link
                <div class="govuk-summary-list__row" id="field-@fieldIdHyphenated" data-testid="field-@fieldIdHyphenated">
                    <dt class="govuk-summary-list__key">
                        Selected @field.Label.Value
                    </dt>
                    <dd class="govuk-summary-list__value">
                        @if (formattedValues.Count == 0)
                        {
                            <span class="govuk-hint">Not answered</span>
                        }
                        else if (!allowMultiple)
                        {
                            @if (isUploadField)
                            {
                                // For upload fields, render as download link
                                var uploadData = Model.GetFieldValue(field.FieldId);
                                if (!string.IsNullOrEmpty(uploadData) && uploadData.StartsWith("[") && uploadData.Contains("\"id\""))
                                {
                                    try
                                    {
                                        var uploadFiles = System.Text.Json.JsonSerializer.Deserialize<List<DfE.CoreLibs.Contracts.ExternalApplications.Models.Response.UploadDto>>(uploadData);
                                        if (uploadFiles != null && uploadFiles.Any())
                                        {
                                            var file = uploadFiles.First();
                                            <form method="post" asp-page="/FormEngine/RenderForm" asp-route-referenceNumber="@Model.ReferenceNumber" asp-route-taskId="@Model.TaskId" asp-route-pageId="@(page.PageId)" asp-page-handler="DownloadFile" style="display:inline">
                                                <input type="hidden" name="FileId" value="@file.Id" />
                                                <input type="hidden" name="ApplicationId" value="@Model.ApplicationId" />
                                                <button type="submit" class="govuk-link" style="border: none; background: none; padding: 0; color: #1d70b8; text-decoration: underline; cursor: pointer;">
                                                    @file.OriginalFileName
                                                </button>
                                            </form>
                                        }
                                        else
                                        {
                                            @Html.Raw(formattedValues.FirstOrDefault())
                                        }
                                    }
                                    catch
                                    {
                                        @Html.Raw(formattedValues.FirstOrDefault())
                                    }
                                }
                                else
                                {
                                    @Html.Raw(formattedValues.FirstOrDefault())
                                }
                            }
                            else if (isAutocompleteField)
                            {
                                var html = RenderAutocompleteSummary(fieldValue);
                                @Html.Raw(html)
                            }
                            else
                            {
                                @Html.Raw(formattedValues.FirstOrDefault())
                            }
                          
                        }

                        
                    </dd>
                    <dd class="govuk-summary-list__actions">
                        @if (Model.IsApplicationEditable())
                        {
                            <a class="govuk-link" href="@changeUrl" id="field-@fieldIdHyphenated-change-link" data-testid="field-@fieldIdHyphenated-change-link">
                                Change<span class="govuk-visually-hidden"> @field.Label.Value</span>
                            </a>
                        }
                    </dd>
                </div>

                @* Show individual items if multiple selection is enabled *@
                @if (allowMultiple && formattedValues.Count > 0)
                {
                    @if (isUploadField)
                    {
                        @* For upload fields with multiple files, render each as download link *@
                        var uploadData = Model.GetFieldValue(field.FieldId);
                        if (!string.IsNullOrEmpty(uploadData) && uploadData.StartsWith("[") && uploadData.Contains("\"id\""))
                        {
                            try
                            {
                                var uploadFiles = System.Text.Json.JsonSerializer.Deserialize<List<DfE.CoreLibs.Contracts.ExternalApplications.Models.Response.UploadDto>>(uploadData);
                                if (uploadFiles != null && uploadFiles.Any())
                                {
                                    @foreach (var (file, index) in uploadFiles.Select((f, i) => (f, i)))
                                    {
                                        var itemId = $"{fieldIdHyphenated}-item-{index}";
                                        <div class="govuk-summary-list__row" id="@itemId" data-testid="@itemId">
                                            <dt class="govuk-summary-list__key">
                                                @itemLabel @(index + 1)
                                            </dt>
                                            <dd class="govuk-summary-list__value">
                                                <form method="post" asp-page="/FormEngine/RenderForm" asp-route-referenceNumber="@Model.ReferenceNumber" asp-route-taskId="@Model.TaskId" asp-route-pageId="@(page.PageId)" asp-page-handler="DownloadFile" style="display:inline">
                                                    <input type="hidden" name="FileId" value="@file.Id" />
                                                    <input type="hidden" name="ApplicationId" value="@Model.ApplicationId" />
                                                    <button type="submit" class="govuk-link" style="border: none; background: none; padding: 0; color: #1d70b8; text-decoration: underline; cursor: pointer;">
                                                        @file.OriginalFileName
                                                    </button>
                                                </form>
                                            </dd>
                                            <dd class="govuk-summary-list__actions">
                                                @if (Model.IsApplicationEditable())
                                                {
                                                    <a class="govuk-link" href="@changeUrl?removeItem=@index" id="@itemId-remove-link" data-testid="@itemId-remove-link">
                                                        Remove<span class="govuk-visually-hidden"> @itemLabel @(index + 1)</span>
                                                    </a>
                                                }
                                            </dd>
                                        </div>
                                    }
                                }
                            }
                            catch
                            {
                                @* Fallback to original behavior if parsing fails *@
                                @foreach (var (value, index) in formattedValues.Select((v, i) => (v, i)))
                                {
                                    var itemId = $"{fieldIdHyphenated}-item-{index}";
                                    <div class="govuk-summary-list__row" id="@itemId" data-testid="@itemId">
                                        <dt class="govuk-summary-list__key">
                                            @itemLabel @(index + 1)
                                        </dt>
                                        <dd class="govuk-summary-list__value">
                                            @Html.Raw(value)
                                        </dd>
                                        <dd class="govuk-summary-list__actions">
                                            @if (Model.IsApplicationEditable())
                                            {
                                                <a class="govuk-link" href="@changeUrl?removeItem=@index" id="@itemId-remove-link" data-testid="@itemId-remove-link">
                                                    Remove<span class="govuk-visually-hidden"> @itemLabel @(index + 1)</span>
                                                </a>
                                            }
                                        </dd>
                                    </div>
                                }
                            }
                        }
                    }
                    else
                    {
                        @* For non-upload fields, use original behavior *@
                        @foreach (var (value, index) in formattedValues.Select((v, i) => (v, i)))
                        {
                            var itemId = $"{fieldIdHyphenated}-item-{index}";
                            <div class="govuk-summary-list__row" id="@itemId" data-testid="@itemId">
                                <dt class="govuk-summary-list__key">
                                    @itemLabel @(index + 1)
                                </dt>
                                <dd class="govuk-summary-list__value">
                                    @Html.Raw(value)
                                </dd>
                                <dd class="govuk-summary-list__actions">
                                    @if (Model.IsApplicationEditable())
                                    {
                                        <a class="govuk-link" href="@changeUrl?removeItem=@index" id="@itemId-remove-link" data-testid="@itemId-remove-link">
                                            Remove<span class="govuk-visually-hidden"> @itemLabel @(index + 1)</span>
                                        </a>
                                    }
                                </dd>
                            </div>
                        }
                    }
                }
            }
            else
            {
                <div class="govuk-summary-list__row" id="field-@fieldIdHyphenated" data-testid="field-@fieldIdHyphenated">
                    <dt class="govuk-summary-list__key">
                        @field.Label.Value
                    </dt>
                    <dd class="govuk-summary-list__value">
                        @if (hasValue)
                        {
                            @if (field.Type == "radios" && field.Options != null)
                            {
                                var selectedOption = field.Options.FirstOrDefault(o => o.Value == fieldValue);
                                @(selectedOption?.Label ?? fieldValue)
                            }
                            else if (field.Type == "select" && field.Options != null)
                            {
                                var selectedOption = field.Options.FirstOrDefault(o => o.Value == fieldValue);
                                @(selectedOption?.Label ?? fieldValue)
                            }
                            else
                            {
                                @Html.Raw(fieldValue.Replace("\r\n", "<br/>").Replace("\r", "<br/>").Replace("\n", "<br/>"))
                            }
                        }
                        else
                        {
                            <span class="govuk-hint">Not answered</span>
                        }
                    </dd>
                    <dd class="govuk-summary-list__actions">
                        @if (Model.IsApplicationEditable())
                        {
                            <a class="govuk-link" href="@changeUrl" id="field-@fieldIdHyphenated-change-link" data-testid="field-@fieldIdHyphenated-change-link">
                                Change<span class="govuk-visually-hidden"> @field.Label.Value</span>
                            </a>
                        }
                    </dd>
                </div>
            }
        }
    }
@functions{
    // Builds HTML matching confirmation page formatting for a single autocomplete selection
    private static string RenderAutocompleteSummary(string rawValue)
    {
        if (string.IsNullOrWhiteSpace(rawValue)) return string.Empty;
        try
        {
            using var doc = JsonDocument.Parse(rawValue);
            if (doc.RootElement.ValueKind != JsonValueKind.Object)
            {
                return System.Net.WebUtility.HtmlEncode(rawValue);
            }

            var root = doc.RootElement;
            string name = root.TryGetProperty("name", out var n) && n.ValueKind == JsonValueKind.String ? n.GetString() ?? string.Empty : string.Empty;
            string ukprn = root.TryGetProperty("ukprn", out var u) ? u.ToString() : string.Empty;
            string ch = root.TryGetProperty("companiesHouseNumber", out var c) && c.ValueKind == JsonValueKind.String ? c.GetString() ?? string.Empty : string.Empty;
            if (string.IsNullOrWhiteSpace(ch) && root.TryGetProperty("companiesHousenumber", out var c2)) ch = c2.ToString();

            var sb = new System.Text.StringBuilder();
            if (!string.IsNullOrWhiteSpace(name)) sb.Append($"<strong class=\"govuk-!-font-weight-bold\">{System.Net.WebUtility.HtmlEncode(name)}</strong>");
            if (!string.IsNullOrWhiteSpace(ukprn)) sb.Append($"<br/>UKPRN: {System.Net.WebUtility.HtmlEncode(ukprn)}");
            if (!string.IsNullOrWhiteSpace(ch)) sb.Append($"<br/>Companies house number: {System.Net.WebUtility.HtmlEncode(ch)}");
            return sb.ToString();
        }
        catch
        {
            return System.Net.WebUtility.HtmlEncode(rawValue);
        }
    }
}
</dl>

@if (Model.IsApplicationEditable())
{
    <form method="post" asp-page-handler="TaskSummary">
        <input type="hidden" asp-for="TaskId" />
        <input type="hidden" asp-for="ReferenceNumber" />
        
        <div class="govuk-checkboxes" data-module="govuk-checkboxes">
            <div class="govuk-checkboxes__item">
                <input class="govuk-checkboxes__input" id="IsTaskCompleted" name="IsTaskCompleted" type="checkbox" value="true" @(Model.IsTaskCompleted ? "checked" : "")>
                <label class="govuk-label govuk-checkboxes__label" for="IsTaskCompleted">
                    Mark this section as complete, it's ready for review
                </label>
            </div>
        </div>

        <div class="govuk-button-group govuk-!-margin-top-6">
            <govuk-button type="submit" id="save-task-summary-button">Save and continue</govuk-button>
        </div>
    </form>
}
else
{
    <div class="govuk-inset-text govuk-!-margin-top-6">
        <p>This application has been submitted and can no longer be changed.</p>
        <p>Status: <strong>@Model.ApplicationStatus</strong></p>
    </div>
    
    <div class="govuk-!-margin-top-6">
        <a class="govuk-link" id="return-to-application-overview" data-testid="return-to-application-overview" href="/applications/@Model.ReferenceNumber">Return to application overview</a>
    </div>
}
