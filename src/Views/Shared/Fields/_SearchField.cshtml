@using Microsoft.AspNetCore.Html;

@model DfE.ExternalApplications.Web.Services.FieldViewModel

@{
    var placeholderText = Html.Raw("e.g. st mary's primary school");
    var labelClasses = Model.Field.Label.IsPageHeading ? "govuk-label--l" : "";
    var endpoint = Html.Raw(Model.Field.Settings!.TryGetValue("searchEndpoint", out var e) ? e : "");
    var fieldId = Model.Field.FieldId;
}

<link rel="stylesheet" href="https://unpkg.com/accessible-autocomplete@2.0.4/dist/accessible-autocomplete.min.css">

<govuk-error-message for="@Model.Id">@Model.ErrorMessage</govuk-error-message>

<div class="govuk-form-group">
    <label class="govuk-label" for="@fieldId-search">@Model.Field.Label.Value</label>
    <div id="autocomplete-wrapper"></div>
</div>
<input type="hidden" id="@fieldId-id" />


<script src="https://unpkg.com/accessible-autocomplete@2.0.4/dist/accessible-autocomplete.min.js"></script>

<script>

        const fieldId = "@fieldId";
        const endpoint = "@endpoint";

        document.addEventListener('DOMContentLoaded', function () {
            const $input = document.querySelector(`#${fieldId}-search`);
        const $hiddenId = document.querySelector(`#${fieldId}-id`);
            accessibleAutocomplete({
            element: document.querySelector('#autocomplete-wrapper'),
                id: `${fieldId}-search`,
                source: async (query, populateResults) => {
                    if (!query || query.length < 3) return;
                    const res = await fetch(`?handler=SearchSuggestions&endpoint=${encodeURIComponent(endpoint)}&query=${encodeURIComponent(query)}`);
                    const data = await res.json(); // expects [{ label: "Trust Name", id: 123 }]
                    populateResults(data);
                },
                displayValue: item => item?.label ?? '',
                onConfirm: item => {
                    $hiddenId.value = item?.id ?? '';
                },
                minLength: 3,
                templates: {
                    suggestion: suggestion => {
                        return `
                                <div class="govuk-body govuk-!-font-size-16 govuk-!-padding-1">
                                      ${suggestion.label}
                                      ${suggestion.hint}
                                </div>
                              `;
                        }
                }
            });

        setTimeout(() => {
            const generatedInput = document.querySelector(`#${fieldId}-search`);
            if (generatedInput) {
                generatedInput.classList.add('govuk-input');
            }
        }, 100);

        });
</script>